--- # Build and deploy packages
name: 'Build using NPM'
description: 'Builds using NPM'
inputs:
  # NPM
  NPM_PRODUCTION_PACKAGER_VERSION:
    description: 'Version of the NPM output nuget packager to use'
    required: false
  NPM_CONTENT_PACKAGE_WALLET_PASSWORD:
    description: 'Password to unlock /Wallet.json'
    required: false
  NPM_PACKAGE_STORE_SIGNING_WALLET:
    description: 'Store signing wallet.json'
    required: false
  NPM_PACKAGE_STORE_SIGNING_WALLET_PASSWORD:
    description: 'Password to unlock NPM_PACKAGE_STORE_SIGNING_WALLET'
    required: false
  NPM_SIGNING:
    description: 'Whether produce a signed package'
    required: false
  NPM_REGISTRY:
    description: 'The NPM Registry to use'
    required: true

  # General
  BUILD_VERSION:
    description: 'Build version'
    required: true
  REPO_VISIBILITY:
    description: 'Visibility of the repo'
    required: true

  # DEPLOYMENT
  PROJECT_TO_PUBLISH:
    description: 'Package (root) to deploy'
    required: false

runs:
  using: "composite"
  steps:

  - name: "NPM: Setup Node.js"
    uses: actions/setup-node@v4.0.2
    with:
      node-version: '20'

  ####################################################################################################################
  # DO NOT USE NPM CACHE...  As it is SLOWER than pulling the packages down npm!
  ####################################################################################################################
  #    - name: "Get npm cache directory"
  #      id: npm-cache-dir
  #      shell: bash
  #      run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
  #
  #    - name: "Restore npm cache"
  #      uses: actions/cache@v4.0.0
  #      id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
  #      with:
  #        path: ${{ steps.npm-cache-dir.outputs.dir }}
  #        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
  #        restore-keys: |
  #          ${{ runner.os }}-node-
  #    - name: "Npm Cache Status"
  #      uses: actions/github-script@v7.0.1
  #      with:
  #        script: |
  #          core.info('Cache Hit: \u001b[38;5;6m$${{steps.npm-cache.outputs.cache-hit}}');
  #          core.notice('Cache Hit: ${{steps.npm-cache.outputs.cache-hit}}');
  ####################################################################################################################

  - name: "NPM: Install dependencies"
    working-directory: ${{github.workspace}}/src
    shell: bash
    run: npm ci --ignore-scripts

  # Running tests doesn't work as they're crap
  # - name: "NPM: Test"
  #   shell: bash
  #   working-directory: ${{github.workspace}}/src
  #   run: npm run test

  - name: "NPM: Build"
    working-directory: ${{github.workspace}}/src
    shell: bash
    run: npm run build

  - name: "NPM: Build Package"
    shell: bash
    run: |
      echo "SIGNING: ${{inputs.NPM_SIGNING}}"
      echo "PROJECT_TO_PUBLISH: ${{inputs.PROJECT_TO_PUBLISH}}"

  - if: |
      inputs.NPM_SIGNING == 'true' &&
      inputs.PROJECT_TO_PUBLISH != ''
    name: "NPM: Build Package"
    shell: bash
    working-directory: ${{ github.workspace }}
    run: |
        dotnet tool run buildcontentpackage \
            -SourcePath "${{github.workspace}}/src/dist" \
            -targetPath "${{github.workspace}}/dist" \
            -version "${{inputs.BUILD_VERSION}}" \
            -WarningAsErrors false \
            -Wallet "${{github.workspace}}/Wallet.json" \
            -WalletPassword "${{inputs.NPM_CONTENT_PACKAGE_WALLET_PASSWORD}}"
    env:
      DOTNET_ROOT: "${{github.workspace}}/.dotnet/${{github.sha}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}"
      DOTNET_INSTALL_DIR: "${{github.workspace}}/.dotnet/${{github.sha}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}"
      DOTNET_MULTILEVEL_LOOKUP: "false"
      DOTNET_NOLOGO: "true"
      DOTNET_PRINT_TELEMETRY_MESSAGE: "false"
      DOTNET_JitCollect64BitCounts: "1"
      DOTNET_ReadyToRun: "0"
      DOTNET_TC_QuickJitForLoops: "1"
      DOTNET_TC_CallCountingDelayMs: "0"
      DOTNET_TieredPGO: "1"
      MSBUILDTERMINALLOGGER: "auto"
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

  - if: |
      inputs.NPM_SIGNING == 'true' &&
      inputs.PROJECT_TO_PUBLISH != ''
    name: "NPM: Check Package"
    shell: bash
    run: |
        ls -la "${{github.workspace}}"
        echo "-----------------------"
        ls "${{github.workspace}}/dist/${{inputs.PROJECT_TO_PUBLISH}}-${{env.BUILD_VERSION}}.nupkg"

  - if: |
        inputs.NPM_SIGNING == 'true' &&
        inputs.PROJECT_TO_PUBLISH != ''
    name: "NPM: Create Store Signing Wallet"
    #uses: ttd2089/secret-file-action@1.0.0
    uses: credfeto/secret-file-action@feat/fix-github-deprecations
    id: store-siging-wallet
    with:
      secret: ${{inputs.NPM_PACKAGE_STORE_SIGNING_WALLET}}
      b64-decode: false

  - if: |
      inputs.NPM_SIGNING == 'true' &&
      inputs.PROJECT_TO_PUBLISH != ''
    name: "NPM: Store Sign Package"
    shell: bash
    working-directory: ${{ github.workspace }}
    run: |
      dotnet tool run signcontentpackage \
          -Package "${{github.workspace}}/dist/${{inputs.PROJECT_TO_PUBLISH}}-${{inputs.BUILD_VERSION}}.nupkg" \
          -WarningAsErrors true \
          -Wallet false \
          -Wallet "${{steps.store-siging-wallet.outputs.file}}" \
          -WalletPassword "${{inputs.NPM_PACKAGE_STORE_SIGNING_WALLET_PASSWORD}}"
    env:
      DOTNET_ROOT: "${{github.workspace}}/.dotnet/${{github.sha}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}"
      DOTNET_INSTALL_DIR: "${{github.workspace}}/.dotnet/${{github.sha}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}"
      DOTNET_MULTILEVEL_LOOKUP: "false"
      DOTNET_NOLOGO: "true"
      DOTNET_PRINT_TELEMETRY_MESSAGE: "false"
      DOTNET_JitCollect64BitCounts: "1"
      DOTNET_ReadyToRun: "0"
      DOTNET_TC_QuickJitForLoops: "1"
      DOTNET_TC_CallCountingDelayMs: "0"
      DOTNET_TieredPGO: "1"
      MSBUILDTERMINALLOGGER: "auto"
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
