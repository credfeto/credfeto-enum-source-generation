--- # Build and deploy packages
name: 'Build and deploy'
description: 'Builds and deploys the source'
inputs:
  # General
  PRODUCTION_BUILD:
    description: 'Whether to build a production build'
    required: true

  # NPM
  NPM_PRODUCTION_PACKAGER_VERSION:
    description: 'Version of the NPM output nuget packager to use'
    required: false
  NPM_CONTENT_PACKAGE_WALLET_PASSWORD:
    description: 'Password to unlock /Wallet.json'
    required: false
  NPM_PACKAGE_STORE_SIGNING_WALLET:
    description: 'Store signing wallet.json'
    required: false
  NPM_PACKAGE_STORE_SIGNING_WALLET_PASSWORD:
    description: 'Password to unlock NPM_PACKAGE_STORE_SIGNING_WALLET'
    required: false

  # NUGET
  NUGET_PUBLIC_RESTORE_FEED_CACHE:
    description: 'Local cache of public nuget feed'
    required: false
  NUGET_PUBLIC_RESTORE_FEED:
    description: 'public nuget feed'
    required: false
  NUGET_ADDITIONAL_RESTORE_FEED_PRERELEASE_CACHE:
    description: 'Cache of any additional nuget feed to download packages from'
    required: false
  NUGET_ADDITIONAL_RESTORE_FEED_RELEASE_CACHE:
    description: 'Cache of Any additional nuget feed to download packages from'
    required: false
  NUGET_ADDITIONAL_RESTORE_FEED_RELEASE:
    description: 'Any additional nuget feed to download packages from'
    required: false
  NUGET_ADDITIONAL_RESTORE_FEED_PRERELEASE:
    description: 'Any additional nuget feed to download packages from'
    required: false
  NUGET_PACK:
    description: 'Whether to pack packages with feeds'
    required: false
  NUGET_FEED:
    description: 'Nuget feed to push packages to'
    required: false
  NUGET_SYMBOL_FEED:
    description: 'Nuget feed to push packages symbols to'
    required: false
  NUGET_API_KEY:
    description: 'API key to authenticate when pushing packages'
    required: false
  SLEET_CONFIG:
    description: 'Sleet config file'
    required: false
  SLEET_FEED:
    description: 'Sleet feed to push packages to'
    required: false

  # Octopus
  OCTOPUS_SERVER:
    description: 'octopus server'
    required: false
  OCTOPUS_SPACE_NAME:
    description: 'octopus space to deploy to'
    required: false
  OCTOPUS_PROJECT:
    description: 'Octopus project to deploy to'
    required: false
  OCTOPUS_CHANNEL:
    description: 'Octopus channel to deploy to'
    required: false
  OCTOPUS_DEPLOY_TO:
    description: 'Octopus environment to deploy to'
    required: false
  OCTOPUS_API_KEY:
    description: 'Octopus api key to talk to authenticate with'
    required: false
  OCTOPUS_DEPLOY_PACKAGE:
    description: 'Package (root) to deploy'
    required: false
  OCTOPUS_DEPLOY_PACKAGE_ZIP:
    description: 'Package (root) to deploy when zipped'
    required: false

  # RELEASE
  GITHUB_TOKEN:
    description: 'Github Token'
    required: true
  REPO_VISIBILITY:
    description: 'Visibility of the repo'
    required: true
  CREATE_RELEASE:
    description: 'Whether to create a release in github'
    required: true

runs:
  using: "composite"
  steps:

  - name: "Parameter Summary"
    uses: actions/github-script@v7.0.1
    with:
      script: |
        core.info('OCTOPUS_DEPLOY_PACKAGE: ${{inputs.OCTOPUS_DEPLOY_PACKAGE}}');
        core.info('OCTOPUS_DEPLOY_PACKAGE_ZIP: ${{inputs.OCTOPUS_DEPLOY_PACKAGE_ZIP}}');
        core.info('OCTOPUS_PROJECT: ${{inputs.OCTOPUS_PROJECT}}');
        core.info('OCTOPUS_CHANNEL: ${{inputs.OCTOPUS_CHANNEL}}');
        core.info('OCTOPUS_DEPLOY_TO: ${{inputs.OCTOPUS_DEPLOY_TO}}');
        core.info('OCTOPUS_SERVER: ${{inputs.OCTOPUS_SERVER}}');
        core.info('OCTOPUS_API_KEY: ${{inputs.OCTOPUS_API_KEY}}');
        core.info('OCTOPUS_SPACE_NAME: ${{inputs.OCTOPUS_SPACE}}');
        core.info('NUGET_API_KEY: ${{inputs.NUGET_API_KEY}}');
        core.info('NUGET_FEED: ${{inputs.NUGET_FEED}}');
        core.info('NUGET_SYMBOL_FEED: ${{inputs.NUGET_SYMBOL_FEED}}');
        core.info('NUGET_PUBLIC_RESTORE_FEED_CACHE: ${{inputs.NUGET_PUBLIC_RESTORE_FEED_CACHE}}');
        core.info('NUGET_PUBLIC_RESTORE_FEED: ${{inputs.NUGET_PUBLIC_RESTORE_FEED}}');
        core.info('NUGET_ADDITIONAL_RESTORE_FEED_RELEASE_CACHE: ${{inputs.NUGET_ADDITIONAL_RESTORE_FEED_RELEASE_CACHE}}');
        core.info('NUGET_ADDITIONAL_RESTORE_FEED_PRERELEASE_CACHE: ${{inputs.NUGET_ADDITIONAL_RESTORE_FEED_PRERELEASE_CACHE}}');
        core.info('NUGET_ADDITIONAL_RESTORE_FEED_RELEASE: ${{inputs.NUGET_ADDITIONAL_RESTORE_FEED_RELEASE}}');
        core.info('NUGET_ADDITIONAL_RESTORE_FEED_PRERELEASE: ${{inputs.NUGET_ADDITIONAL_RESTORE_FEED_PRERELEASE}}');
        core.info('NUGET_PACK: ${{inputs.NUGET_PACK}}');

  - name: "Fetch tags and master"
    shell: bash
    run: |
      git fetch --tags
      echo "REF: $GITHUB_REF"
      echo "SHA: $GITHUB_SHA"
      echo "GIT_BRANCH=$GITHUB_REF" >> "$GITHUB_ENV"
      git branch --remote

  - name: "Check file existence"
    id: check_files
    shell: bash
    run: |
      [[ -d src && -f src/global.json && '${{hashfiles('**/*.csproj', '**/*.cs')}}' != '' ]] && echo 'CSPROJ_EXIST=true' >> "$GITHUB_OUTPUT" || echo 'CSPROJ_EXIST=false' >> "$GITHUB_OUTPUT"
      [[ -d src && -f src/global.json && '${{hashfiles('**/*.sln')}}' != '' ]] && echo 'SLN_EXIST=true' >> "$GITHUB_OUTPUT" || echo 'SLN_EXIST=false' >> "$GITHUB_OUTPUT"
      [[ -d db && '${{hashfiles('**/*.sql')}}' != '' ]] && echo 'SQL_EXIST=true' >> "$GITHUB_OUTPUT" || echo 'SQL_EXIST=false' >> "$GITHUB_OUTPUT"
      [[ -d src && -f src/package.json && src/package-lock.json && '${{hashfiles('src/package.json', 'src/package-lock.json')}}' != '' ]] && echo 'NPM_EXIST=true' >> "$GITHUB_OUTPUT" || echo 'NPM_EXIST=false' >> "$GITHUB_OUTPUT"
      [[ -f Wallet.json ]] && echo 'NPM_SIGNING_EXIST=true' >> "$GITHUB_OUTPUT" || echo 'NPM_SIGNING_EXIST=false' >> "$GITHUB_OUTPUT"

  - name: "Check Files Results"
    uses: actions/github-script@v7.0.1
    with:
      script: |
        core.info('CSPROJ_EXIST: ${{steps.check_files.outputs.CSPROJ_EXIST}}');
        core.info('SLN_EXIST: ${{steps.check_files.outputs.SLN_EXIST}}');
        core.info('SQL_EXIST: ${{steps.check_files.outputs.SQL_EXIST}}');
        core.info('NPM_EXIST: ${{steps.check_files.outputs.NPM_EXIST}}');
        core.info('NPM_SIGNING_EXIST: ${{steps.check_files.outputs.NPM_SIGNING_EXIST}}');

  - name: "Prepare build Results folder"
    working-directory: ${{github.workspace}}
    shell: bash
    run: |
      [ ! -d "${{github.workspace}}/results" ] && mkdir "${{github.workspace}}/results" || echo "Results created"

  - name: "Install Build tools"
    uses: ./.github/actions/build-tools
    with:
      GITHUB_TOKEN: ${{inputs.GITHUB_TOKEN}}
      NUGET_PUBLIC_RESTORE_FEED_CACHE: ${{inputs.NUGET_PUBLIC_RESTORE_FEED_CACHE}}
      NUGET_PUBLIC_RESTORE_FEED: ${{inputs.NUGET_PUBLIC_RESTORE_FEED}}
      NUGET_ADDITIONAL_RESTORE_FEED_RELEASE_CACHE: ${{inputs.NUGET_ADDITIONAL_RESTORE_FEED_RELEASE_CACHE}}
      NUGET_ADDITIONAL_RESTORE_FEED_PRERELEASE_CACHE: ${{inputs.NUGET_ADDITIONAL_RESTORE_FEED_PRERELEASE_CACHE}}
      NUGET_ADDITIONAL_RESTORE_FEED_RELEASE: ${{inputs.NUGET_ADDITIONAL_RESTORE_FEED_RELEASE}}
      NUGET_ADDITIONAL_RESTORE_FEED_PRERELEASE: ${{inputs.NUGET_ADDITIONAL_RESTORE_FEED_PRERELEASE}}

  - name: "Check Build Tools Requirements"
    id: build_tools
    shell: bash
    run: |
      [[ (${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true'}}) || steps.check_files.outputs.NPM_EXIST == 'true' ]] && echo 'BUILD_ENV=true' >> "$GITHUB_OUTPUT" || echo 'BUILD_ENV=false' >> "$GITHUB_OUTPUT"
      [[ (${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true'}}) || steps.check_files.outputs.NPM_EXIST == 'true' ]] && echo 'BUILD_ENV=true' >> "$GITHUB_OUTPUT" || echo 'BUILD_ENV=false' >> "$GITHUB_OUTPUT"

  - if: |-
      steps.build_tools.outputs.BUILD_ENV == 'true' &&
      inputs.NUGET_PACK == 'true'
    uses: ./.github/actions/dotnet-tool
    with:
      TOOL_NAME: Credfeto.Package.Push

  - name: "Get Unique Build Number"
    if: steps.build_tools.outputs.BUILD_ENV == 'true'
    uses: onyxmueller/build-tag-number@v1
    id: build-number
    with:
      token: ${{inputs.GITHUB_TOKEN}}
      prefix: github

  - if: steps.build_tools.outputs.BUILD_ENV == 'true'
    name: "Set Define Build Version"
    shell: bash
    run: dotnet buildversion --BuildNumber "${{steps.build-number.outputs.build_number}}"
    env:
      DOTNET_ROOT: "${{github.workspace}}/.dotnet/${{github.sha}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}"
      DOTNET_INSTALL_DIR: "${{github.workspace}}/.dotnet/${{github.sha}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}"
      DOTNET_MULTILEVEL_LOOKUP: "false"
      DOTNET_NOLOGO: "true"
      DOTNET_PRINT_TELEMETRY_MESSAGE: "false"
      DOTNET_ReadyToRun: "0"
      DOTNET_TC_QuickJitForLoops: "1"
      DOTNET_TieredPGO: "1"

  - name: "Deploy check - Default"
    shell: bash
    run: |
      { echo "DEPLOY=false"; } >> "$GITHUB_ENV"

  - name: "Deploy check - Is main or master"
    if: endsWith(env.BUILD_VERSION, '-main') || endsWith(env.BUILD_VERSION, '-master')
    shell: bash
    run: |
      { echo "DEPLOY=true"; echo "RELEASE=false"; } >> "$GITHUB_ENV"

  - name: Deploy check - Is release branch
    if: contains(env.BUILD_VERSION, '-') == false
    shell: bash
    run: |
      { echo "DEPLOY=true"; echo "RELEASE=true"; } >> "$GITHUB_ENV"

  - name: "Deploy check - Is Dependabot"
    if: (github.actor == 'dependabot[bot]')
    shell: bash
    run: |
      { echo "DEPLOY=false";  } >> "$GITHUB_ENV"

  - name: "Install Package Builder"
    if: steps.check_files.outputs.NPM_EXIST == 'true' && steps.check_files.outputs.NPM_SIGNING_EXIST == 'true'
    uses: ./.github/actions/dotnet-tool
    with:
      TOOL_NAME: FunFair.Content.Packager.Cmd
      TOOL_VERSION: ${{inputs.NPM_PRODUCTION_PACKAGER_VERSION}}

  - name: "Install Package Store Signer"
    if: steps.check_files.outputs.NPM_EXIST == 'true' && steps.check_files.outputs.NPM_SIGNING_EXIST == 'true'
    uses: ./.github/actions/dotnet-tool
    with:
      TOOL_NAME: FunFair.Content.PackageSigner.Cmd
      TOOL_VERSION: ${{inputs.NPM_PRODUCTION_PACKAGER_VERSION}}

  - name: "Install Octopus Deploy CLI"
    if: steps.build_tools.outputs.BUILD_ENV == 'true' && inputs.OCTOPUS_DEPLOY_PACKAGE != ''
    uses: OctopusDeploy/install-octocli@v3.0.0
    with:
      version: latest

  - name: "Create Release Notes"
    if: steps.build_tools.outputs.BUILD_ENV == 'true'
    shell: bash
    run: dotnet changelog --changelog CHANGELOG.md --extract RELEASE_NOTES.md --version "${{env.BUILD_VERSION}}"
    env:
      DOTNET_ROOT: "${{github.workspace}}/.dotnet/${{github.sha}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}"
      DOTNET_INSTALL_DIR: "${{github.workspace}}/.dotnet/${{github.sha}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}"
      DOTNET_MULTILEVEL_LOOKUP: "false"
      DOTNET_NOLOGO: "true"
      DOTNET_PRINT_TELEMETRY_MESSAGE: "false"
      DOTNET_ReadyToRun: "0"
      DOTNET_TC_QuickJitForLoops: "1"
      DOTNET_TieredPGO: "1"

  - name: "Read Release Notes"
    if: steps.build_tools.outputs.BUILD_ENV == 'true'
    id: release-notes
    uses: juliangruber/read-file-action@v1
    with:
      path: RELEASE_NOTES.md

  ############################################################################################################
  # DOTNET BUILD
  ############################################################################################################
  - name: "Dotnet: Build"
    if: steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true'
    uses: ./.github/actions/dotnet
    with:
      PRODUCTION_BUILD: ${{inputs.PRODUCTION_BUILD}}
      BUILD_VERSION: ${{env.BUILD_VERSION}}
      BUILD_SQL: ${{steps.check_files.outputs.SQL_EXIST}}
      NUGET_PACK: ${{inputs.NUGET_PACK}}
      NUGET_FEED: ${{inputs.NUGET_FEED}}
      NUGET_SYMBOL_FEED: ${{inputs.NUGET_SYMBOL_FEED}}
      NUGET_API_KEY: ${{inputs.NUGET_API_KEY}}
      SLEET_CONFIG: ${{inputs.SLEET_CONFIG}}
      SLEET_FEED: ${{inputs.SLEET_FEED}}
      GITHUB_TOKEN: ${{inputs.GITHUB_TOKEN}}
      REPO_VISIBILITY: ${{inputs.REPO_VISIBILITY}}
      OCTOPUS_DEPLOY_PACKAGE: ${{inputs.OCTOPUS_DEPLOY_PACKAGE}}
      OCTOPUS_DEPLOY_PACKAGE_ZIP: ${{inputs.OCTOPUS_DEPLOY_PACKAGE_ZIP}}

  ############################################################################################################
  # NPM BUILD
  ############################################################################################################
  - name: "Npm: Build"
    if: steps.check_files.outputs.NPM_EXIST == 'true'
    uses: ./.github/actions/npm
    with:
      BUILD_VERSION: ${{env.BUILD_VERSION}}
      REPO_VISIBILITY: ${{inputs.REPO_VISIBILITY}}
      NPM_PRODUCTION_PACKAGER_VERSION: ${{inputs.NPM_PRODUCTION_PACKAGER_VERSION}}
      NPM_CONTENT_PACKAGE_WALLET_PASSWORD: ${{inputs.NPM_CONTENT_PACKAGE_WALLET_PASSWORD}}
      NPM_PACKAGE_STORE_SIGNING_WALLET: ${{inputs.NPM_PACKAGE_STORE_SIGNING_WALLET}}
      NPM_PACKAGE_STORE_SIGNING_WALLET_PASSWORD: ${{inputs.NPM_PACKAGE_STORE_SIGNING_WALLET_PASSWORD}}
      NPM_SIGNING: ${{steps.check_files.outputs.NPM_SIGNING_EXIST}}
      OCTOPUS_DEPLOY_PACKAGE: ${{inputs.OCTOPUS_DEPLOY_PACKAGE}}
      OCTOPUS_DEPLOY_PACKAGE_ZIP: ${{inputs.OCTOPUS_DEPLOY_PACKAGE_ZIP}}

  ############################################################################################################
  # DEPLOY TO OCTOPUS
  ############################################################################################################

  - name: "Dotnet: Push package to Octopus (EXE and DB)"
    if: |-
      steps.check_files.outputs.CSPROJ_EXIST == 'true' &&
      steps.check_files.outputs.SLN_EXIST == 'true' &&
      steps.check_files.outputs.SQL_EXIST == 'true' &&
      inputs.OCTOPUS_DEPLOY_PACKAGE != '' &&
      env.DEPLOY == 'true'
    shell: bash
    run: octopus package upload --no-prompt --overwrite-mode=ignore --package="${{github.workspace}}/${{inputs.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-win-x64.${{env.BUILD_VERSION}}.zip" --package="${{github.workspace}}/${{inputs.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-linux-x64.${{env.BUILD_VERSION}}.zip" --package="${{github.workspace}}/${{inputs.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-linux-arm64.${{env.BUILD_VERSION}}.zip" --package="${{github.workspace}}/${{inputs.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-database.${{env.BUILD_VERSION}}.zip"
    env:
      OCTOPUS_URL: "${{inputs.OCTOPUS_SERVER}}"
      OCTOPUS_API_KEY: "${{inputs.OCTOPUS_API_KEY}}"
      OCTOPUS_SPACE: "${{inputs.OCTOPUS_SPACE_NAME}}"

  - name: "Dotnet: Push package to Octopus (EXE ONLY)"
    if: |-
      steps.check_files.outputs.CSPROJ_EXIST == 'true' &&
      steps.check_files.outputs.SLN_EXIST == 'true' &&
      steps.check_files.outputs.SQL_EXIST != 'true' &&
      inputs.OCTOPUS_DEPLOY_PACKAGE != '' &&
      env.DEPLOY == 'true'
    shell: bash
    run: octopus package upload --no-prompt --overwrite-mode=ignore --package="${{github.workspace}}/${{inputs.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-win-x64.${{env.BUILD_VERSION}}.zip" --package="${{github.workspace}}/${{inputs.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-linux-x64.${{env.BUILD_VERSION}}.zip" --package="${{github.workspace}}/${{inputs.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-linux-arm64.${{env.BUILD_VERSION}}.zip"
    env:
      OCTOPUS_URL: "${{inputs.OCTOPUS_SERVER}}"
      OCTOPUS_API_KEY: "${{inputs.OCTOPUS_API_KEY}}"
      OCTOPUS_SPACE: "${{inputs.OCTOPUS_SPACE_NAME}}"

  - name: "Dotnet: Push package to Octopus (NPM NUPKG ONLY)"
    if: |-
      steps.check_files.outputs.NPM_EXIST == 'true' &&
      steps.check_files.outputs.NPM_SIGNING_EXIST == 'true' &&
      inputs.OCTOPUS_DEPLOY_PACKAGE != '' &&
      env.DEPLOY == 'true'
    shell: bash
    run: octopus package upload --no-prompt --overwrite-mode=ignore --package="${{github.workspace}}/${{inputs.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-${{env.BUILD_VERSION}}.nupkg"
    env:
      OCTOPUS_URL: "${{inputs.OCTOPUS_SERVER}}"
      OCTOPUS_API_KEY: "${{inputs.OCTOPUS_API_KEY}}"
      OCTOPUS_SPACE: "${{inputs.OCTOPUS_SPACE_NAME}}"

  - name: "Dotnet: Create Octopus Release (EXE and DB)"
    if: |-
      steps.check_files.outputs.CSPROJ_EXIST == 'true' &&
      steps.check_files.outputs.SLN_EXIST == 'true' &&
      steps.check_files.outputs.SQL_EXIST == 'true' &&
      inputs.OCTOPUS_DEPLOY_PACKAGE != '' &&
      inputs.OCTOPUS_CHANNEL != '' &&
      env.DEPLOY == 'true'
    shell: bash
    run: octopus release create --no-prompt --project="${{inputs.OCTOPUS_PROJECT}}" --version="${{env.BUILD_VERSION}}" --channel="${{inputs.OCTOPUS_CHANNEL}}" --package="${{inputs.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-win-x64:${{env.BUILD_VERSION}}" --package="${{inputs.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-linux-x64:${{env.BUILD_VERSION}}" --package="${{inputs.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-linux-arm64:${{env.BUILD_VERSION}}" --package="${{inputs.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-database:${{env.BUILD_VERSION}}" --release-notes-file="RELEASE_NOTES.md"
    env:
      OCTOPUS_URL: "${{inputs.OCTOPUS_SERVER}}"
      OCTOPUS_API_KEY: "${{inputs.OCTOPUS_API_KEY}}"
      OCTOPUS_SPACE: "${{inputs.OCTOPUS_SPACE_NAME}}"

  - name: "Dotnet: Create Octopus Release (EXE ONLY)"
    if: |-
      steps.check_files.outputs.CSPROJ_EXIST == 'true' &&
      steps.check_files.outputs.SLN_EXIST == 'true' &&
      steps.check_files.outputs.SQL_EXIST != 'true' &&
      inputs.OCTOPUS_DEPLOY_PACKAGE != '' &&
      inputs.OCTOPUS_CHANNEL != '' &&
      env.DEPLOY == 'true'
    shell: bash
    run: octopus release create --no-prompt --project="${{inputs.OCTOPUS_PROJECT}}" --version="${{env.BUILD_VERSION}}" --channel="${{inputs.OCTOPUS_CHANNEL}}" --package="${{inputs.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-win-x64:${{env.BUILD_VERSION}}" --package="${{inputs.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-linux-x64:${{env.BUILD_VERSION}}" --package="${{inputs.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-linux-arm64:${{env.BUILD_VERSION}}" --release-notes-file="RELEASE_NOTES.md"
    env:
      OCTOPUS_URL: "${{inputs.OCTOPUS_SERVER}}"
      OCTOPUS_API_KEY: "${{inputs.OCTOPUS_API_KEY}}"
      OCTOPUS_SPACE: "${{inputs.OCTOPUS_SPACE_NAME}}"

  - name: "Dotnet: Create Octopus Release (NPM ONLY)"
    if: |-
      steps.check_files.outputs.NPM_EXIST == 'true' &&
      steps.check_files.outputs.NPM_SIGNING_EXIST == 'true' &&
      inputs.OCTOPUS_DEPLOY_PACKAGE != '' &&
      env.DEPLOY == 'true'
    shell: bash
    run: octopus release create --no-prompt --project="${{inputs.OCTOPUS_PROJECT}}" --version="${{env.BUILD_VERSION}}" --channel="${{inputs.OCTOPUS_CHANNEL}}" --package="${{inputs.OCTOPUS_DEPLOY_PACKAGE_ZIP}}:${{env.BUILD_VERSION}}" --release-notes-file="RELEASE_NOTES.md"
    env:
      OCTOPUS_URL: "${{inputs.OCTOPUS_SERVER}}"
      OCTOPUS_API_KEY: "${{inputs.OCTOPUS_API_KEY}}"
      OCTOPUS_SPACE: "${{inputs.OCTOPUS_SPACE_NAME}}"

  - name: "Deploy Octopus Release"
    if: |-
      ((steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true') ||
      (steps.check_files.outputs.NPM_EXIST == 'true' && steps.check_files.outputs.NPM_SIGNING_EXIST == 'true')) &&
      inputs.OCTOPUS_DEPLOY_PACKAGE != '' &&
      inputs.OCTOPUS_CHANNEL != '' &&
      env.DEPLOY == 'true'
    shell: bash
    run: octopus release deploy --no-prompt --project="${{inputs.OCTOPUS_PROJECT}}" --version="${{env.BUILD_VERSION}}" --environment="${{inputs.OCTOPUS_DEPLOY_TO}}"
    env:
      OCTOPUS_URL: "${{inputs.OCTOPUS_SERVER}}"
      OCTOPUS_API_KEY: "${{inputs.OCTOPUS_API_KEY}}"
      OCTOPUS_SPACE: "${{inputs.OCTOPUS_SPACE_NAME}}"

  ############################################################################################################
  # Create GitHub Release
  ############################################################################################################
  - name: "Create Release"
    if: steps.build_tools.outputs.BUILD_ENV == 'true' && inputs.CREATE_RELEASE == 'true'
    id: create_release
    uses: ncipollo/release-action@v1
    with:
      tag: v${{env.BUILD_VERSION}}
      name:  Release ${{env.BUILD_VERSION}}
      bodyFile: "RELEASE_NOTES.md"
      draft: false
      prerelease: false
      generateReleaseNotes: true
      token: ${{inputs.GITHUB_TOKEN}}

  ############################################################################################################
  # Software Bill of materials
  ############################################################################################################
  - name: "Software Bill of materials"
    if: steps.build_tools.outputs.BUILD_ENV == 'true'
    uses: ./.github/actions/sbom
    with:
      REPO_VISIBILITY: ${{inputs.REPO_VISIBILITY}}

  ############################################################################################################
  # Upload Sarif files to GitHub
  ############################################################################################################
  - name: "Upload SARIF file for diagnostics"
    uses: ./.github/actions/sarif
    with:
      GITHUB_TOKEN: ${{inputs.GITHUB_TOKEN}}
      REPO_VISIBILITY: ${{inputs.REPO_VISIBILITY}}
