--- # Build and deploy packages
name: 'Build and deploy'
description: 'Builds and deploys the source'
inputs:
  # GENERAL
  PRODUCTION_BUILD:
    description: 'Whether to build a production build'
    required: true

  # NPM
  NPM_PRODUCTION_PACKAGER_VERSION:
    description: 'Version of the NPM output nuget packager to use'
    required: false
  NPM_CONTENT_PACKAGE_WALLET_PASSWORD:
    description: 'Password to unlock /Wallet.json'
    required: false
  NPM_PACKAGE_STORE_SIGNING_WALLET:
    description: 'Store signing wallet.json'
    required: false
  NPM_PACKAGE_STORE_SIGNING_WALLET_PASSWORD:
    description: 'Password to unlock NPM_PACKAGE_STORE_SIGNING_WALLET'
    required: false

  # NUGET
  NUGET_PUBLIC_RESTORE_FEED_CACHE:
    description: 'Local cache of public nuget feed'
    required: false
  NUGET_PUBLIC_RESTORE_FEED:
    description: 'public nuget feed'
    required: false
  NUGET_ADDITIONAL_RESTORE_FEED_PRERELEASE_CACHE:
    description: 'Cache of any additional nuget feed to download packages from'
    required: false
  NUGET_ADDITIONAL_RESTORE_FEED_RELEASE_CACHE:
    description: 'Cache of Any additional nuget feed to download packages from'
    required: false
  NUGET_ADDITIONAL_RESTORE_FEED_RELEASE:
    description: 'Any additional nuget feed to download packages from'
    required: false
  NUGET_ADDITIONAL_RESTORE_FEED_PRERELEASE:
    description: 'Any additional nuget feed to download packages from'
    required: false
  NUGET_PACK:
    description: 'Whether to pack packages with feeds'
    required: false
  NUGET_FEED:
    description: 'Nuget feed to push packages to'
    required: false
  NUGET_SYMBOL_FEED:
    description: 'Nuget feed to push packages symbols to'
    required: false
  NUGET_API_KEY:
    description: 'API key to authenticate when pushing packages'
    required: false
  SLEET_CONFIG:
    description: 'Sleet config file'
    required: false
  SLEET_FEED:
    description: 'Sleet feed to push packages to'
    required: false

  # DEPLOYMENT
  PROJECT_TO_PUBLISH:
    description: 'Package (root) to deploy'
    required: false

  # AWS
  AWS_ACCESS_KEY_ID:
    description: 'AWS Access key'
    required: true
  AWS_SECRET_ACCESS_KEY:
    description: 'AWS Secret key'
    required: true
  AWS_REGION:
    description: 'AWS region'
    required: true
  AWS_CONTAINER_REGISTRY:
    description: 'AWS Elastic Container Registry'
    required: true
  AWS_LOAD_BALANCER_HOSTNAME:
    description: 'LoadBalancer Hostname'
    required: true
  AWS_LOAD_BALANCER_PRIORITY:
    description: 'LoadBalancer Priority'
    required: true
  API_HOST:
    description: 'API Hostname'
    required: true
  API_PREFIX:
    description: 'API prefix'
    required: true

  # CLOUD FORMATION
  CLOUD_FORMATION_DEPLOY:
    description: 'Whether to deploy to cloudformation'
    required: true
  CLOUD_FORMATION_STACK:
    description: 'The Cloud Formation stack to deploy as'
    required: true
  CLOUDFORMATION_SNS_ARN:
    description: 'SSN Notification ARN'
    required: false

  # DOCKER
  DOCKER_USERNAME:
    description: 'Docker username'
    required: true
  DOCKER_ACCESS_TOKEN:
    description: 'Docker access token'
    required: true
  DOCKER_APP_OWNER:
    description: 'docker app owner'
    required: true
  DOCKER_APP_NAME:
    description: 'docker app name'
    required: true

  # GITHUB
  GITHUB_TOKEN:
    description: 'Github Token'
    required: true
  REPO_VISIBILITY:
    description: 'Visibility of the repo'
    required: true
  CREATE_RELEASE:
    description: 'Whether to create a release in github'
    required: true

  # DATABASE
  SQL_SERVER:
    description: 'SQL Server to connect to'
    required: false
  SQL_DB:
    description: 'Database to deploy to'
    required: false
  SQL_USER:
    description: 'User to connect to the database as'
    required: false
  SQL_PASSWORD:
    description: 'Password for SQL_USER'
    required: false

runs:
  using: "composite"
  steps:

    - name: "Parameter Summary"
      uses: actions/github-script@v7.0.1
      with:
        script: |
          core.info('PROJECT_TO_PUBLISH: ${{inputs.PROJECT_TO_PUBLISH}}');
          core.info('NUGET_API_KEY: ${{inputs.NUGET_API_KEY}}');
          core.info('NUGET_FEED: ${{inputs.NUGET_FEED}}');
          core.info('NUGET_SYMBOL_FEED: ${{inputs.NUGET_SYMBOL_FEED}}');
          core.info('NUGET_PUBLIC_RESTORE_FEED_CACHE: ${{inputs.NUGET_PUBLIC_RESTORE_FEED_CACHE}}');
          core.info('NUGET_PUBLIC_RESTORE_FEED: ${{inputs.NUGET_PUBLIC_RESTORE_FEED}}');
          core.info('NUGET_ADDITIONAL_RESTORE_FEED_RELEASE_CACHE: ${{inputs.NUGET_ADDITIONAL_RESTORE_FEED_RELEASE_CACHE}}');
          core.info('NUGET_ADDITIONAL_RESTORE_FEED_PRERELEASE_CACHE: ${{inputs.NUGET_ADDITIONAL_RESTORE_FEED_PRERELEASE_CACHE}}');
          core.info('NUGET_ADDITIONAL_RESTORE_FEED_RELEASE: ${{inputs.NUGET_ADDITIONAL_RESTORE_FEED_RELEASE}}');
          core.info('NUGET_ADDITIONAL_RESTORE_FEED_PRERELEASE: ${{inputs.NUGET_ADDITIONAL_RESTORE_FEED_PRERELEASE}}');
          core.info('NUGET_PACK: ${{inputs.NUGET_PACK}}');

    - name: "Set branch"
      shell: bash
      run: echo "GIT_BRANCH=$GITHUB_REF" >> "$GITHUB_ENV"

    - name: "Check file existence"
      id: check_files
      shell: bash
      run: |
        [[ -d src && -f src/global.json && '${{hashfiles('**/*.csproj', '**/*.cs')}}' != '' ]] && echo 'CSPROJ_EXIST=true' >> "$GITHUB_OUTPUT" || echo 'CSPROJ_EXIST=false' >> "$GITHUB_OUTPUT"
        [[ -d src && -f src/global.json && '${{hashfiles('**/*.sln')}}' != '' ]] && echo 'SLN_EXIST=true' >> "$GITHUB_OUTPUT" || echo 'SLN_EXIST=false' >> "$GITHUB_OUTPUT"
        [[ -d db && '${{hashfiles('**/*.sql')}}' != '' ]] && echo 'SQL_EXIST=true' >> "$GITHUB_OUTPUT" || echo 'SQL_EXIST=false' >> "$GITHUB_OUTPUT"
        [[ -d src && -f src/package.json && src/package-lock.json && '${{hashfiles('src/package.json', 'src/package-lock.json')}}' != '' ]] && echo 'NPM_EXIST=true' >> "$GITHUB_OUTPUT" || echo 'NPM_EXIST=false' >> "$GITHUB_OUTPUT"
        [[ -f Wallet.json ]] && echo 'NPM_SIGNING_EXIST=true' >> "$GITHUB_OUTPUT" || echo 'NPM_SIGNING_EXIST=false' >> "$GITHUB_OUTPUT"
        [[ -f Dockerfile && '${{hashfiles('Dockerfile')}}' != '' ]] && echo 'DOCKERFILE_EXIST=true' >> "$GITHUB_OUTPUT" || echo 'DOCKERFILE_EXIST=false' >> "$GITHUB_OUTPUT"
        [[ -f healthcheck && '${{hashfiles('healthcheck')}}' != '' ]] && echo 'HEALTHCHECK_EXIST=true' >> "$GITHUB_OUTPUT" || echo 'HEALTHCHECK_EXIST=false' >> "$GITHUB_OUTPUT"

    - name: "Check Files Results"
      uses: actions/github-script@v7.0.1
      with:
        script: |
          core.info('CSPROJ_EXIST: ${{steps.check_files.outputs.CSPROJ_EXIST}}');
          core.info('SLN_EXIST: ${{steps.check_files.outputs.SLN_EXIST}}');
          core.info('SQL_EXIST: ${{steps.check_files.outputs.SQL_EXIST}}');
          core.info('NPM_EXIST: ${{steps.check_files.outputs.NPM_EXIST}}');
          core.info('NPM_SIGNING_EXIST: ${{steps.check_files.outputs.NPM_SIGNING_EXIST}}');

    - name: "Prepare build Results folder"
      working-directory: ${{github.workspace}}
      shell: bash
      run: |
        [ ! -d "${{github.workspace}}/results" ] && mkdir "${{github.workspace}}/results" || echo "Results created"

    - name: "Install Build tools"
      uses: ./.github/actions/build-tools
      with:
        GITHUB_TOKEN: ${{inputs.GITHUB_TOKEN}}
        NUGET_PUBLIC_RESTORE_FEED_CACHE: ${{inputs.NUGET_PUBLIC_RESTORE_FEED_CACHE}}
        NUGET_PUBLIC_RESTORE_FEED: ${{inputs.NUGET_PUBLIC_RESTORE_FEED}}
        NUGET_ADDITIONAL_RESTORE_FEED_RELEASE_CACHE: ${{inputs.NUGET_ADDITIONAL_RESTORE_FEED_RELEASE_CACHE}}
        NUGET_ADDITIONAL_RESTORE_FEED_PRERELEASE_CACHE: ${{inputs.NUGET_ADDITIONAL_RESTORE_FEED_PRERELEASE_CACHE}}
        NUGET_ADDITIONAL_RESTORE_FEED_RELEASE: ${{inputs.NUGET_ADDITIONAL_RESTORE_FEED_RELEASE}}
        NUGET_ADDITIONAL_RESTORE_FEED_PRERELEASE: ${{inputs.NUGET_ADDITIONAL_RESTORE_FEED_PRERELEASE}}

    - name: "Configure Docker"
      uses: ./.github/actions/docker-setup
      with:
        AWS_ACCESS_KEY_ID: ${{inputs.AWS_ACCESS_KEY_ID}}
        AWS_SECRET_ACCESS_KEY: ${{inputs.AWS_SECRET_ACCESS_KEY}}
        AWS_REGION: ${{inputs.AWS_REGION}}
        AWS_CONTAINER_REGISTRY: ${{inputs.AWS_CONTAINER_REGISTRY}}
        DOCKER_USERNAME: ${{inputs.DOCKER_USERNAME}}
        DOCKER_ACCESS_TOKEN: ${{inputs.DOCKER_ACCESS_TOKEN}}

    - name: "Check Build Tools Requirements"
      id: build_tools
      shell: bash
      run: |
        [[ (${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true'}}) || steps.check_files.outputs.NPM_EXIST == 'true' ]] && echo 'BUILD_ENV=true' >> "$GITHUB_OUTPUT" || echo 'BUILD_ENV=false' >> "$GITHUB_OUTPUT"
        [[ (${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true'}}) || steps.check_files.outputs.NPM_EXIST == 'true' ]] && echo 'BUILD_ENV=true' >> "$GITHUB_OUTPUT" || echo 'BUILD_ENV=false' >> "$GITHUB_OUTPUT"

    - name: "Install Multi-push tool"
      if: |-
        steps.build_tools.outputs.BUILD_ENV == 'true' &&
        inputs.NUGET_PACK == 'true'
      uses: ./.github/actions/dotnet-tool
      with:
        TOOL_NAME: Credfeto.Package.Push
        TOOL_VERSION: latest

    - name: "Get Unique Build Number"
      uses: ./.github/actions/build-version
      with:
        GITHUB_TOKEN: ${{inputs.GITHUB_TOKEN}}

    - name: "Install Dotnet Build Check tool"
      if: steps.check_files.outputs.SLN_EXIST == 'true'
      uses: ./.github/actions/dotnet-tool
      with:
        TOOL_NAME: FunFair.BuildCheck
        TOOL_VERSION: latest

    - name: "Deploy check - Default"
      shell: bash
      run: |
        { echo "DEPLOY=false"; } >> "$GITHUB_ENV"

    - name: "Deploy check - Is main or master"
      if: endsWith(env.BUILD_VERSION, '-main') || endsWith(env.BUILD_VERSION, '-master')
      shell: bash
      run: |
        { echo "DEPLOY=true"; echo "RELEASE=false"; } >> "$GITHUB_ENV"

    - name: Deploy check - Is release branch
      if: contains(env.BUILD_VERSION, '-') == false
      shell: bash
      run: |
        { echo "DEPLOY=true"; echo "RELEASE=true"; } >> "$GITHUB_ENV"

    - name: "Deploy check - Is Dependabot"
      if: (github.actor == 'dependabot[bot]')
      shell: bash
      run: |
        { echo "DEPLOY=false";  } >> "$GITHUB_ENV"

    - name: "Install Package Builder"
      if: steps.check_files.outputs.NPM_EXIST == 'true' && steps.check_files.outputs.NPM_SIGNING_EXIST == 'true'
      uses: ./.github/actions/dotnet-tool
      with:
        TOOL_NAME: FunFair.Content.Packager.Cmd
        TOOL_VERSION: ${{inputs.NPM_PRODUCTION_PACKAGER_VERSION}}

    - name: "Install Package Store Signer"
      if: steps.check_files.outputs.NPM_EXIST == 'true' && steps.check_files.outputs.NPM_SIGNING_EXIST == 'true'
      uses: ./.github/actions/dotnet-tool
      with:
        TOOL_NAME: FunFair.Content.PackageSigner.Cmd
        TOOL_VERSION: ${{inputs.NPM_PRODUCTION_PACKAGER_VERSION}}

    - name: "Create Release Notes"
      if: steps.build_tools.outputs.BUILD_ENV == 'true'
      shell: bash
      run: dotnet changelog --changelog CHANGELOG.md --extract RELEASE_NOTES.md --version "${{env.BUILD_VERSION}}"
      env:
        DOTNET_ROOT: "${{github.workspace}}/.dotnet/${{github.sha}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}"
        DOTNET_INSTALL_DIR: "${{github.workspace}}/.dotnet/${{github.sha}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}"
        DOTNET_MULTILEVEL_LOOKUP: "false"
        DOTNET_NOLOGO: "true"
        DOTNET_PRINT_TELEMETRY_MESSAGE: "false"
        DOTNET_JitCollect64BitCounts: "1"
        DOTNET_ReadyToRun: "0"
        DOTNET_TC_QuickJitForLoops: "1"
        DOTNET_TC_CallCountingDelayMs: "0"
        DOTNET_TieredPGO: "1"
        MSBUILDTERMINALLOGGER: "auto"

    - name: "Read Release Notes"
      if: steps.build_tools.outputs.BUILD_ENV == 'true'
      id: release-notes
      uses: juliangruber/read-file-action@v1
      with:
        path: RELEASE_NOTES.md

    ############################################################################################################
    # DOTNET BUILD
    ############################################################################################################
    - name: "Dotnet: Build"
      if: steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true'
      uses: ./.github/actions/dotnet
      with:
        PRODUCTION_BUILD: ${{inputs.PRODUCTION_BUILD}}
        BUILD_VERSION: ${{env.BUILD_VERSION}}
        BUILD_SQL: ${{steps.check_files.outputs.SQL_EXIST}}
        DB_FOLDER: ${{github.workspace}}/db
        NUGET_PACK: ${{inputs.NUGET_PACK}}
        NUGET_FEED: ${{inputs.NUGET_FEED}}
        NUGET_SYMBOL_FEED: ${{inputs.NUGET_SYMBOL_FEED}}
        NUGET_API_KEY: ${{inputs.NUGET_API_KEY}}
        SLEET_CONFIG: ${{inputs.SLEET_CONFIG}}
        SLEET_FEED: ${{inputs.SLEET_FEED}}
        GITHUB_TOKEN: ${{inputs.GITHUB_TOKEN}}
        REPO_VISIBILITY: ${{inputs.REPO_VISIBILITY}}
        PROJECT_TO_PUBLISH: ${{inputs.PROJECT_TO_PUBLISH}}

    ############################################################################################################
    # NPM BUILD
    ############################################################################################################
    - name: "Npm: Build"
      if: steps.check_files.outputs.NPM_EXIST == 'true'
      uses: ./.github/actions/npm
      with:
        BUILD_VERSION: ${{env.BUILD_VERSION}}
        REPO_VISIBILITY: ${{inputs.REPO_VISIBILITY}}
        NPM_PRODUCTION_PACKAGER_VERSION: ${{inputs.NPM_PRODUCTION_PACKAGER_VERSION}}
        NPM_CONTENT_PACKAGE_WALLET_PASSWORD: ${{inputs.NPM_CONTENT_PACKAGE_WALLET_PASSWORD}}
        NPM_PACKAGE_STORE_SIGNING_WALLET: ${{inputs.NPM_PACKAGE_STORE_SIGNING_WALLET}}
        NPM_PACKAGE_STORE_SIGNING_WALLET_PASSWORD: ${{inputs.NPM_PACKAGE_STORE_SIGNING_WALLET_PASSWORD}}
        NPM_SIGNING: ${{steps.check_files.outputs.NPM_SIGNING_EXIST}}
        PROJECT_TO_PUBLISH: ${{inputs.PROJECT_TO_PUBLISH}}

    ############################################################################################################
    # DEPLOY TO DOCKER
    ############################################################################################################

    - name: "Copy docker: Dockerfile"
      if: |-
        steps.check_files.outputs.CSPROJ_EXIST == 'true' &&
        steps.check_files.outputs.SLN_EXIST == 'true' &&
        steps.check_files.outputs.DOCKERFILE_EXIST == 'true' &&
        inputs.DOCKER_APP_NAME != '' &&
        env.DEPLOY == 'true'
      shell: bash
      run: cp "${{github.workspace}}/Dockerfile" "${{github.workspace}}/server-dist/linux-arm64"

    - name: "Copy docker: healthcheck"
      if: |-
        steps.check_files.outputs.CSPROJ_EXIST == 'true' &&
        steps.check_files.outputs.SLN_EXIST == 'true' &&
        steps.check_files.outputs.HEALTHCHECK_EXIST == 'true' &&
        inputs.DOCKER_APP_NAME != '' &&
        env.DEPLOY == 'true'
      shell: bash
      run: cp "${{github.workspace}}/healthcheck" "${{github.workspace}}/server-dist/linux-arm64"

    - name: "Dotnet: Build Docker Container"
      if: |-
        steps.check_files.outputs.CSPROJ_EXIST == 'true' &&
        steps.check_files.outputs.SLN_EXIST == 'true' &&
        inputs.CLOUD_FORMATION_DEPLOY == 'true' &&
        inputs.DOCKER_APP_NAME != '' &&
        env.DEPLOY == 'true'
      uses: ./.github/actions/docker-build-to-registry
      with:
        DEPLOY: ${{env.DEPLOY}}
        GITHUB_TOKEN: ${{inputs.GITHUB_TOKEN}}
        BUILD_VERSION: ${{env.BUILD_VERSION}}
        APP_OWNER: ${{inputs.DOCKER_APP_OWNER}}
        APP_NAME: ${{inputs.DOCKER_APP_NAME}}
        AWS_CONTAINER_REGISTRY: ${{inputs.AWS_CONTAINER_REGISTRY}}
        CONTAINER_SOURCE: ${{github.workspace}}/server-dist/linux-arm64
        CONTAINER_PLATFORM: linux/arm64

    - name: "Dotnet: SQL Deploy"
      if: |-
        steps.check_files.outputs.CSPROJ_EXIST == 'true' &&
        steps.check_files.outputs.SLN_EXIST == 'true' &&
        steps.check_files.outputs.SQL_EXIST == 'true' &&
        inputs.CLOUD_FORMATION_DEPLOY == 'true' &&
        inputs.DOCKER_APP_NAME != '' &&
        env.DEPLOY == 'true'
      uses: ./.github/actions/database-deploy-deploy
      with:
        BUILD_VERSION: ${{env.BUILD_VERSION}}
        SQL_SERVER: ${{inputs.SQL_SERVER}}
        SQL_DB: ${{inputs.SQL_DB}}
        SQL_USER: ${{inputs.SQL_USER}}
        SQL_PASSWORD: ${{inputs.SQL_PASSWORD}}
        DB_FOLDER: ${{github.workspace}}/db

    - name: "Dotnet: Cloudformation Deploy"
      if: |-
        steps.check_files.outputs.CSPROJ_EXIST == 'true' &&
        steps.check_files.outputs.SLN_EXIST == 'true' &&
        inputs.CLOUD_FORMATION_DEPLOY == 'true' &&
        inputs.DOCKER_APP_NAME != '' &&
        env.DEPLOY == 'true'
      uses: ./.github/actions/cloudformation-deploy
      with:
        CLOUD_FORMATION_STACK: ${{inputs.CLOUD_FORMATION_STACK}}
        CLOUD_FORMATION_TEMPLATE_FILE: "${{github.workspace}}/cloudformation.json"
        CLOUDFORMATION_SNS_ARN: ${{inputs.CLOUDFORMATION_SNS_ARN}}
        BUILD_VERSION: ${{env.BUILD_VERSION}}
        DOCKER_APP_OWNER: ${{inputs.DOCKER_APP_OWNER}}
        DOCKER_APP_NAME: ${{inputs.DOCKER_APP_NAME}}
        AWS_CONTAINER_REGISTRY: ${{inputs.AWS_CONTAINER_REGISTRY}}
        API_HOST: ${{inputs.API_HOST}}
        API_PREFIX: ${{inputs.API_PREFIX}}
        AWS_LOAD_BALANCER_HOSTNAME: ${{inputs.AWS_LOAD_BALANCER_HOSTNAME}}
        AWS_LOAD_BALANCER_PRIORITY: ${{inputs.AWS_LOAD_BALANCER_PRIORITY}}

    ############################################################################################################
    # Create GitHub Release
    ############################################################################################################
    - name: "Create Release"
      if: steps.build_tools.outputs.BUILD_ENV == 'true' && inputs.CREATE_RELEASE == 'true'
      id: create_release
      uses: ncipollo/release-action@v1
      with:
        tag: v${{env.BUILD_VERSION}}
        name:  Release ${{env.BUILD_VERSION}}
        bodyFile: "RELEASE_NOTES.md"
        draft: false
        prerelease: false
        generateReleaseNotes: true
        token: ${{inputs.GITHUB_TOKEN}}

    ############################################################################################################
    # Software Bill of materials
    ############################################################################################################
    - name: "Software Bill of materials"
      if: steps.build_tools.outputs.BUILD_ENV == 'true'
      uses: ./.github/actions/sbom
      with:
        GITHUB_TOKEN: ${{inputs.GITHUB_TOKEN}}
        REPO_VISIBILITY: ${{inputs.REPO_VISIBILITY}}

    ############################################################################################################
    # Upload Sarif files to GitHub
    ############################################################################################################
    - name: "Upload SARIF file for diagnostics"
      uses: ./.github/actions/sarif
      with:
        GITHUB_TOKEN: ${{inputs.GITHUB_TOKEN}}
        REPO_VISIBILITY: ${{inputs.REPO_VISIBILITY}}
