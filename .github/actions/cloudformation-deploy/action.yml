--- # Deploy docker image using cloudformation template to aws
name: 'Deploy to Cloudformation template'
description: 'Deploy docker image using cloudformation template to aws'
inputs:
  CLOUD_FORMATION_STACK:
    description: 'The Cloud Formation stack to deploy as'
    required: true
  CLOUD_FORMATION_TEMPLATE_FILE:
    description: 'The Cloud Formation file to deploy'
    required: true
  CLOUDFORMATION_SNS_ARN:
    description: 'SSN Notification ARN'
    required: false
  DOCKER_APP_OWNER:
    description: 'docker app owner'
    required: true
  DOCKER_APP_NAME:
    description: 'docker app name'
    required: true
  API_HOST:
    description: 'Api Host'
    required: true
  API_PREFIX:
    description: 'API Prefix'
    required: true
  AWS_LOAD_BALANCER_HOSTNAME:
    description: "AWS Load Balancer match hostname"
    required: true
  AWS_LOAD_BALANCER_PRIORITY:
    description: "AWS Load Balancer match priority"
    required: true
  AWS_CONTAINER_REGISTRY:
    description: "AWS container registry to retrieve package from"
    required: true
  BUILD_VERSION:
    description: "Build Version"
    required: true

runs:
  using: "composite"
  steps:

    - name: "Build TemplateParameters file"
      shell: bash
      run: |
        FIRST=1
        {
          echo "["
          jq '.Parameters' "${{inputs.CLOUD_FORMATION_TEMPLATE_FILE}}" | \
                    grep ': {' | \
                    grep -oEi '([a-z]|_|[1-9])+' | \
                    sort | \
                    uniq | while read -r key; do

            value="${!key}"

            # only output the keys which have values
            if [ -n "$value" ]; then

              [ "$FIRST" -eq 0 ] && echo "  ,"
              FIRST=0

              # TODO: need a better way to do this that allows for escaping of characters that need to in json.
              echo "  { \"ParameterKey\": \"$key\", \"ParameterValue\": \"$value\" }"

            fi

            done
            echo "]"
          } > "${{github.workspace}}/TemplateParameters.json"
      env:
        ApplicationName: ${{inputs.CLOUD_FORMATION_STACK}}
        ApplicationOwner: ${{inputs.DOCKER_APP_OWNER}}
        ApplicationContainer: ${{inputs.DOCKER_APP_NAME}}
        ApplicationVersion: ${{inputs.BUILD_VERSION}}
        ApiPrefix: ${{inputs.API_PREFIX}}
        ApiHost: ${{inputs.API_HOST}}
        AwsContainerRegistry: ${{inputs.AWS_CONTAINER_REGISTRY}}
        LoadBalancerHostName: ${{inputs.AWS_LOAD_BALANCER_HOSTNAME}}
        LoadBalancerPriority: ${{inputs.AWS_LOAD_BALANCER_PRIORITY}}

    - name: "show Validated TemplateParameters"
      shell: bash
      run: |
        echo "Validated parameters:"
        jq . "${{github.workspace}}/TemplateParameters.json"

    - if: inputs.CLOUDFORMATION_SNS_ARN != ''
      name: "AWS Cloudformation Deploy (With Notifications)"
      shell: bash
      run: |
        /usr/local/aws-cli/v2/current/bin/aws \
                  cloudformation deploy \
                        --template-file "${{inputs.CLOUD_FORMATION_TEMPLATE_FILE}}" \
                        --stack-name "${{inputs.CLOUD_FORMATION_STACK}}" \
                        --parameter-overrides file://TemplateParameters.json \
                        --notification-arns "${{inputs.CLOUDFORMATION_SNS_ARN}}"

    - if: inputs.CLOUDFORMATION_SNS_ARN == ''
      name: "AWS Cloudformation Deploy (No Notifications)"
      shell: bash
      run: |
        /usr/local/aws-cli/v2/current/bin/aws \
                  cloudformation deploy \
                        --template-file "${{inputs.CLOUD_FORMATION_TEMPLATE_FILE}}" \
                        --stack-name "${{inputs.CLOUD_FORMATION_STACK}}" \
                        --parameter-overrides file://TemplateParameters.json

    - name: "AWS Enable Stack termination protection"
      shell: bash
      run: |
        /usr/local/aws-cli/v2/current/bin/aws \
                  cloudformation update-termination-protection \
                          --enable-termination-protection \
                          --stack-name "${{inputs.CLOUD_FORMATION_STACK}}"
