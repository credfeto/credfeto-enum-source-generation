--- # Build SQL
name: 'Build SQL'
description: 'Builds SQL Package'
inputs:
  # General
  BUILD_VERSION:
    description: 'Build version'
    required: true

  # Octopus
  OCTOPUS_DEPLOY_PACKAGE:
    description: 'Package (root) to deploy'
    required: false
  OCTOPUS_DEPLOY_PACKAGE_ZIP:
    description: 'Package (root) to deploy when zipped'
    required: false

  DB_FOLDER:
    description: 'Folder where SQL Files live'
    required: true

runs:
  using: "composite"
  steps:

  - name: "SQL: Install TSQLLint"
    uses: ./.github/actions/dotnet-tool
    with:
      TOOL_NAME: TSQLLint
      TOOL_VERSION: latest

  - name: "SQL: Lint SQL Files"
    shell: bash
    run: dotnet tsqllint "${{inputs.DB_FOLDER}}"
    env:
      DOTNET_ROOT: "${{github.workspace}}/.dotnet/${{github.sha}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}"
      DOTNET_INSTALL_DIR: "${{github.workspace}}/.dotnet/${{github.sha}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}"
      DOTNET_MULTILEVEL_LOOKUP: "false"
      DOTNET_NOLOGO: "true"
      DOTNET_PRINT_TELEMETRY_MESSAGE: "false"
      DOTNET_JitCollect64BitCounts: "1"
      DOTNET_ReadyToRun: "0"
      DOTNET_TC_QuickJitForLoops: "1"
      DOTNET_TC_CallCountingDelayMs: "0"
      DOTNET_TieredPGO: "1"
      MSBUILDTERMINALLOGGER: "auto"

  - name: "SQL: Get SQL Compare"
    shell: bash
    run: docker pull redgate/sqlcompare:latest

  - name: "Build SQL change"
    shell: bash
    run: |
      docker run \
             "-v$GITHUB_WORKSPACE:$GITHUB_WORKSPACE" \
             --net=host \
             --rm redgate/sqlcompare:latest \
             /IAgreeToTheEULA \
             /filter:"$DB_FILTER" \
             /options:CaseSensitiveObjectDefinition,ConsiderNextFilegroupInPartitionSchemes,DecryptPost2kEncryptedObjects,DoNotOutputCommentHeader,ForceColumnOrder,IgnoreCertificatesAndCryptoKeys,IgnoreDatabaseAndServerName,IgnoreUserProperties,IgnoreUsersPermissionsAndRoleMemberships,IgnoreWhiteSpace,IgnoreWithElementOrder,IncludeDependencies,NoDeploymentLogging,ThrowOnFileParseFailed,UseCompatibilityLevel \
             /transactionIsolationLevel:SERIALIZABLE \
             /include:staticData \
             /scriptFile:"$DB_OUTPUT" \
             /scripts1:"$DB_SOURCE" \
             /showWarnings \
             /include:Identical \
             /report:"$DB_REPORT" \
             /reportType:Xml \
             /force \
             /OutputWidth:1024 \
             /empty2 \
             /verbose
    env:
      DB_SOURCE: ${{inputs.DB_FOLDER}}
      DB_OUTPUT: ${{github.workspace}}/update.test.sql
      DB_LOG: ${{github.workspace}}/update.log
      DB_REPORT: ${{github.workspace}}/update.xml
      DB_FILTER: ${{inputs.DB_FOLDER}}/Filter.scpf
      DOCKER_CONTENT_TRUST: 0

  - name: "SQL: Zip DB for Octopus"
    working-directory: ${{inputs.DB_FOLDER}}
    shell: bash
    run: |
      mkdir -p ../package/db/state
      cp -R -- * ../package/db/state
      cd ../package
      zip -9r "${{github.workspace}}/${{inputs.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-database.${{inputs.BUILD_VERSION}}.zip" .
