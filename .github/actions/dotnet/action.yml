--- # Build and deploy packages
name: 'Build Dotnet'
description: 'Builds and deploys the source'
inputs:
  # NUGET
  NUGET_ADDITIONAL_RESTORE_FEED:
    description: 'Any additional nuget feed to download packages from'
    required: false
  NUGET_PACK:
    description: 'Whether to pack packages with feeds'
    required: false
  NUGET_FEED:
    description: 'Nuget feed to push packages to'
    required: false
  NUGET_API_KEY:
    description: 'API key to authenticate when pushing packages'
    required: false

  # General
  BUILD_VERSION:
    description: 'Build version'
    required: true

  RELEASE_NOTES:
    description: 'Release notes'
    required: false

  BUILD_SQL:
    description: 'Whether to build SQL DB'
    required: true

  # Octopus
  OCTOPUS_DEPLOY_PACKAGE:
    description: 'Package (root) to deploy'
    required: false
  OCTOPUS_DEPLOY_PACKAGE_ZIP:
    description: 'Package (root) to deploy when zipped'
    required: false

  # BUILD
  TEMP_WORK_DIR:
    description: 'Temp path'
    required: true

runs:
  using: "composite"
  steps:

  ############################################################################################################
  # DOTNET BUILD
  ############################################################################################################
  - if: ${{inputs.NUGET_ADDITIONAL_RESTORE_FEED != ''}}
    name: "Dotnet: Add optional nuget feed"
    shell: bash
    run: dotnet nuget add source --name Additional1 "${{inputs.NUGET_ADDITIONAL_RESTORE_FEED}}"
    env:
      TMPDIR: "${{inputs.TEMP_WORK_DIR}}"

  - name: "Dotnet: Setup package cache"
    uses: actions/cache@v3
    with:
      path: ~/.nuget/packages
      key: ${{runner.os}}-nuget-${{hashFiles('**/*.sln', '**/*.csproj', '**/*.props')}}
      restore-keys: |
        ${{runner.os}}-nuget-

  - name: "Dotnet: Restore packages"
    working-directory: ${{github.workspace}}/src
    shell: bash
    run: dotnet restore -nodeReuse:False
    env:
      DOTNET_ROOT: "${{github.workspace}}/.dotnet/${{github.sha}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}"
      DOTNET_INSTALL_DIR: "${{github.workspace}}/.dotnet/${{github.sha}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}"
      DOTNET_MULTILEVEL_LOOKUP: "false"
      DOTNET_NOLOGO: "true"
      DOTNET_PRINT_TELEMETRY_MESSAGE: "false"
      DOTNET_ReadyToRun: "0"
      DOTNET_TC_QuickJitForLoops: "1"
      DOTNET_TieredPGO: "1"
      TMPDIR: "${{inputs.TEMP_WORK_DIR}}"

  - name: "Dotnet: Build"
    working-directory: ${{github.workspace}}/src
    shell: bash
    run: dotnet build --no-restore --configuration Release "/p:Version=${{inputs.BUILD_VERSION}}" -nodeReuse:False
    env:
      ReleaseNotes: ${{inputs.RELEASE_NOTES}}
      DOTNET_ROOT: "${{github.workspace}}/.dotnet/${{github.sha}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}"
      DOTNET_INSTALL_DIR: "${{github.workspace}}/.dotnet/${{github.sha}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}"
      DOTNET_MULTILEVEL_LOOKUP: "false"
      DOTNET_NOLOGO: "true"
      DOTNET_PRINT_TELEMETRY_MESSAGE: "false"
      DOTNET_ReadyToRun: "0"
      DOTNET_TC_QuickJitForLoops: "1"
      DOTNET_TieredPGO: "1"
      TMPDIR: "${{inputs.TEMP_WORK_DIR}}"

  ## RUN TESTS
  - name: "Dotnet: Test"
    working-directory: ${{github.workspace}}/src
    shell: bash
    run: dotnet test --no-build --no-restore -noConsoleLogger --configuration Release "/p:Version=${{inputs.BUILD_VERSION}}" --filter FullyQualifiedName\!~Integration --logger:"trx;LogFilePrefix=testResults" --results-directory ../test-results -nodeReuse:False
    env:
      ReleaseNotes: ${{inputs.RELEASE_NOTES}}
      DOTNET_ROOT: "${{github.workspace}}/.dotnet/${{github.sha}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}"
      DOTNET_INSTALL_DIR: "${{github.workspace}}/.dotnet/${{github.sha}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}"
      DOTNET_MULTILEVEL_LOOKUP: "false"
      DOTNET_NOLOGO: "true"
      DOTNET_PRINT_TELEMETRY_MESSAGE: "false"
      DOTNET_ReadyToRun: "0"
      DOTNET_TC_QuickJitForLoops: "1"
      DOTNET_TieredPGO: "1"
      TMPDIR: "${{inputs.TEMP_WORK_DIR}}"

  # ############################################################################################################
  # # DATABASE BUILD
  # ############################################################################################################
  - if: ${{inputs.BUILD_SQL == 'true'}}
    name: "SQL: Build"
    uses: ./.github/actions/sql
    with:
      BUILD_VERSION: ${{inputs.BUILD_VERSION}}
      OCTOPUS_DEPLOY_PACKAGE: ${{inputs.OCTOPUS_DEPLOY_PACKAGE}}
      OCTOPUS_DEPLOY_PACKAGE_ZIP: ${{inputs.OCTOPUS_DEPLOY_PACKAGE_ZIP}}
      TEMP_WORK_DIR: "${{inputs.TEMP_WORK_DIR}}"

  ############################################################################################################
  # Publish ready for deploy to octopus
  ############################################################################################################
  - if: ${{inputs.OCTOPUS_DEPLOY_PACKAGE != ''}}
    name: "Dotnet: Pack Packages for Octopus (win-x64)"
    uses: ./.github/actions/dotnet-publish
    with:
      BUILD_VERSION: ${{inputs.BUILD_VERSION}}
      RELEASE_NOTES: ${{inputs.RELEASE_NOTES}}
      PLATFORM: "win-x64"
      OCTOPUS_DEPLOY_PACKAGE: ${{inputs.OCTOPUS_DEPLOY_PACKAGE}}
      OCTOPUS_DEPLOY_PACKAGE_ZIP: ${{inputs.OCTOPUS_DEPLOY_PACKAGE_ZIP}}
      TEMP_WORK_DIR: "${{inputs.TEMP_WORK_DIR}}"

  - if: ${{inputs.OCTOPUS_DEPLOY_PACKAGE != ''}}
    name: "Dotnet: Pack Packages for Octopus (linux-x64)"
    uses: ./.github/actions/dotnet-publish
    with:
      BUILD_VERSION: ${{inputs.BUILD_VERSION}}
      RELEASE_NOTES: ${{inputs.RELEASE_NOTES}}
      PLATFORM: "linux-x64"
      OCTOPUS_DEPLOY_PACKAGE: ${{inputs.OCTOPUS_DEPLOY_PACKAGE}}
      OCTOPUS_DEPLOY_PACKAGE_ZIP: ${{inputs.OCTOPUS_DEPLOY_PACKAGE_ZIP}}
      TEMP_WORK_DIR: "${{inputs.TEMP_WORK_DIR}}"

  - if: ${{inputs.OCTOPUS_DEPLOY_PACKAGE != ''}}
    name: "Dotnet: Pack Packages for Octopus (linux-arm64)"
    uses: ./.github/actions/dotnet-publish
    with:
      BUILD_VERSION: ${{inputs.BUILD_VERSION}}
      RELEASE_NOTES: ${{inputs.RELEASE_NOTES}}
      PLATFORM: "linux-arm64"
      OCTOPUS_DEPLOY_PACKAGE: ${{inputs.OCTOPUS_DEPLOY_PACKAGE}}
      OCTOPUS_DEPLOY_PACKAGE_ZIP: ${{inputs.OCTOPUS_DEPLOY_PACKAGE_ZIP}}
      TEMP_WORK_DIR: "${{inputs.TEMP_WORK_DIR}}"

  ############################################################################################################
  # DOTNET PUSH TO NUGET
  ############################################################################################################
  - if: ${{inputs.NUGET_API_KEY != '' && inputs.NUGET_PACK == 'true'}}
    name: "Dotnet: Pack tool"
    working-directory: ${{github.workspace}}/src
    shell: bash
    run: dotnet pack --configuration Release "/p:Version=${{inputs.BUILD_VERSION}}" --no-restore -nodeReuse:False
    env:
      ReleaseNotes: ${{inputs.RELEASE_NOTES}}
      DOTNET_ROOT: "${{github.workspace}}/.dotnet/${{github.sha}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}"
      DOTNET_INSTALL_DIR: "${{github.workspace}}/.dotnet/${{github.sha}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}"
      DOTNET_MULTILEVEL_LOOKUP: "false"
      DOTNET_NOLOGO: "true"
      DOTNET_PRINT_TELEMETRY_MESSAGE: "false"
      DOTNET_ReadyToRun: "0"
      DOTNET_TC_QuickJitForLoops: "1"
      DOTNET_TieredPGO: "1"
      TMPDIR: "${{inputs.TEMP_WORK_DIR}}"

  - if: ${{inputs.NUGET_API_KEY != '' && inputs.NUGET_PACK == 'true'}}
    name: "Dotnet: Copy packed to dist"
    shell: bash
    run:  |
      shopt -s globstar
      [ ! -d ../dist ] && mkdir ../dist
      cp **/*.nupkg ../dist
    working-directory: ${{github.workspace}}/src

  - if: ${{inputs.NUGET_API_KEY != '' && inputs.NUGET_PACK == 'true'}}
    name: "Dotnet: Publish Packages to Nuget"
    shell: bash
    run: dotnet pushpackages -folder dist --api-key "${{inputs.NUGET_API_KEY}}" --source "${{inputs.NUGET_FEED}}"
    env:
      DOTNET_ROOT: "${{github.workspace}}/.dotnet/${{github.sha}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}"
      DOTNET_INSTALL_DIR: "${{github.workspace}}/.dotnet/${{github.sha}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}"
      DOTNET_MULTILEVEL_LOOKUP: "false"
      DOTNET_NOLOGO: "true"
      DOTNET_PRINT_TELEMETRY_MESSAGE: "false"
      DOTNET_ReadyToRun: "0"
      DOTNET_TC_QuickJitForLoops: "1"
      DOTNET_TieredPGO: "1"
