name: "Build: .NET Pre-Release"

on:
  push:
    paths:
      - 'src/**/*'
      - '.github/workflows/build*.yml'
    branches-ignore:
      - 'release/*'
      - 'hotfix/*'

concurrency:
  group: ${{github.workflow}}-${{github.ref}}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build-pre-release:

    runs-on: ubuntu-latest
    env:
      OCTOPUS_DEPLOY_PACKAGE: ${{vars.OCTOPUS_DEPLOY_PACKAGE}}
      OCTOPUS_DEPLOY_PACKAGE_ZIP: ${{vars.OCTOPUS_DEPLOY_PACKAGE_ZIP}}
      OCTOPUS_PROJECT: ${{vars.OCTOPUS_PROJECT}}
      OCTOPUS_CHANNEL: ${{vars.OCTOPUS_PRERELEASE_CHANNEL}}
      OCTOPUS_DEPLOY_TO: ${{vars.OCTOPUS_DEPLOYTO_PRERELEASE}}
      OCTOPUS_SERVER: ${{vars.OCTOPUS_SERVER}}
      OCTOPUS_API_KEY: ${{secrets.OCTOPUS_API_KEY}}
      OCTOPUS_SPACE_NAME: ${{vars.OCTOPUS_SPACE}}
      NUGET_API_KEY: ${{secrets.NUGET_API_KEY}}
      NUGET_FEED: ${{secrets.NUGET_FEED}}
      NUGET_ADDITIONAL_RESTORE_FEED: ${{secrets.NUGET_ADDITIONAL_RESTORE_FEED}}
      NUGET_PACK: ${{vars.NUGET_PACK}}
      DOTNET_NOLOGO: true
      DOTNET_PRINT_TELEMETRY_MESSAGE: false
      DOTNET_MULTILEVEL_LOOKUP: false
      DOTNET_INSTALL_DIR: ${{github.workspace}}/.dotnet
      DOTNET_ReadyToRun: 0
      DOTNET_TC_QuickJitForLoops: 1
      DOTNET_TieredPGO: 1
      DB_PACKAGE_PUSH: ""
      DB_PACKAGE_DEPLOY: ""


    steps:
      - run: sudo chown -R "$USER:$USER" "$GITHUB_WORKSPACE"
      - run: |
          echo "OCTOPUS_DEPLOY_PACKAGE: ${{env.OCTOPUS_DEPLOY_PACKAGE}}"
          echo "OCTOPUS_DEPLOY_PACKAGE_ZIP: ${{env.OCTOPUS_DEPLOY_PACKAGE_ZIP}}"
          echo "OCTOPUS_PROJECT: ${{env.OCTOPUS_PROJECT}}"
          echo "OCTOPUS_CHANNEL: ${{env.OCTOPUS_CHANNEL}}"
          echo "OCTOPUS_DEPLOY_TO: ${{env.OCTOPUS_DEPLOY_TO}}"
          echo "OCTOPUS_SERVER: ${{env.OCTOPUS_SERVER}}"
          echo "OCTOPUS_API_KEY: ${{env.OCTOPUS_API_KEY}}"
          echo "OCTOPUS_SPACE_NAME: ${{env.OCTOPUS_SPACE}}"
          echo "NUGET_API_KEY: ${{env.NUGET_API_KEY}}"
          echo "NUGET_FEED: ${{env.NUGET_FEED}}"
          echo "NUGET_ADDITIONAL_RESTORE_FEED: ${{env.NUGET_ADDITIONAL_RESTORE_FEED}}"
          echo "NUGET_PACK: ${{env.NUGET_PACK}}"
          echo "DOTNET_NOLOGO: ${{env.DOTNET_NOLOGO}}"
          echo "DOTNET_PRINT_TELEMETRY_MESSAGE: ${{env.DOTNET_PRINT_TELEMETRY_MESSAGE}}"
          echo "DOTNET_MULTILEVEL_LOOKUP: ${{env.DOTNET_MULTILEVEL_LOOKUP}}"
          echo "DOTNET_INSTALL_DIR: ${{env.DOTNET_INSTALL_DIR}}"
          echo "DOTNET_ReadyToRun: ${{env.DOTNET_ReadyToRun}}"
          echo "DOTNET_TC_QuickJitForLoops: ${{env.DOTNET_TC_QuickJitForLoops}}"
          echo "DOTNET_TieredPGO: ${{env.DOTNET_TieredPGO}}"
          echo "DB_PACKAGE_PUSH: ${{env.DB_PACKAGE_PUSH}}"
          echo "DB_PACKAGE_DEPLOY: ${{env.DB_PACKAGE_DEPLOY}}"

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Fetch tags and master
        run: |
          git fetch --tags
          echo "REF: $GITHUB_REF"
          echo "SHA: $GITHUB_SHA"
          echo "GIT_BRANCH=$GITHUB_REF" >> "$GITHUB_ENV"
          git branch --remote
      - name: Check file existence
        id: check_files
        run: |
          [[ -d src && -f src/global.json && '${{hashfiles('**/*.csproj', '**/*.cs')}}' != '' ]] && echo 'CSPROJ_EXIST=true' >> "$GITHUB_OUTPUT" || echo 'CSPROJ_EXIST=false' >> "$GITHUB_OUTPUT"
          [[ -d src && -f src/global.json && '${{hashfiles('**/*.sln')}}' != '' ]] && echo 'SLN_EXIST=true' >> "$GITHUB_OUTPUT" || echo 'SLN_EXIST=false' >> "$GITHUB_OUTPUT"
          [[ -d src && -f src/global.json && '${{hashfiles('db/**/*.sql')}}' != '' ]] && echo 'SQL_EXIST=true' >> "$GITHUB_OUTPUT" || echo 'SQL_EXIST=false' >> "$GITHUB_OUTPUT"
      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true'}}
        name: Determine .net core version
        uses: credfeto/action-dotnet-version-detect@v1.3.0
        with:
          file: src/global.json
          fallback: 6.0.*

      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true'}}
        name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          dotnet-version: |
              6.0.*
              ${{env.DOTNET_VERSION}}
      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true'}}
        name: Enable dotnet tools
        run: dotnet new tool-manifest
      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true'}}
        name: Install Build Version Tool
        run: dotnet tool install --local FunFair.BuildVersion
      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true' && env.NUGET_PACK == 'true'}}
        name: Install Multi-Push Tool
        run: dotnet tool install --local Credfeto.Package.Push
      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true'}}
        name: Set Define Build Version
        run: dotnet buildversion --BuildNumber "$GITHUB_RUN_NUMBER"
      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true'}}
        name: Install Changelog Tool
        run: dotnet tool install --local Credfeto.Changelog.Cmd
      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true' && env.OCTOPUS_DEPLOY_PACKAGE != ''}}
        name: install Octopus Deploy CLI
        uses: OctopusDeploy/install-octocli@v3.0.0
        with:
          version: latest
      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true'}}
        name: Create Release Notes
        run: dotnet changelog --changelog CHANGELOG.md --extract RELEASE_NOTES.md --version "${{env.BUILD_VERSION}}"
      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true'}}
        id: release-notes
        uses: juliangruber/read-file-action@v1
        with:
          path: RELEASE_NOTES.md

      # BUILD DOTNET
      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true' && env.NUGET_ADDITIONAL_RESTORE_FEED != ''}}
        name: Add optional nuget feed
        run: dotnet nuget add source --name Additional1 "${{env.NUGET_ADDITIONAL_RESTORE_FEED}}"
      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true'}}
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{runner.os}}-nuget-${{hashFiles('**/*.sln', '**/*.csproj', '**/*.props')}}
          restore-keys: |
            ${{runner.os}}-nuget-
      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true'}}
        name: Restore dotnet packages
        working-directory: ./src
        run: dotnet restore
      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true'}}
        name: Build with dotnet
        working-directory: ./src
        run: dotnet build --no-restore --configuration Release "/p:Version=${{env.BUILD_VERSION}}"
        env:
          ReleaseNotes: ${{steps.release-notes.outputs.content}}

      ## RUN TESTS
      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true'}}
        name: Test with dotnet
        working-directory: ./src
        run: dotnet test --no-build --no-restore -noConsoleLogger --configuration Release "/p:Version=${{env.BUILD_VERSION}}" --filter FullyQualifiedName\!~Integration --logger:"trx;LogFilePrefix=testResults" --results-directory ../test-results
        env:
          ReleaseNotes: ${{steps.release-notes.outputs.content}}

      ## DATABASE SUPPORT
      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true' && env.SQL_EXIST == 'true'}}
        run: dotnet tool install --local TSQLLint

      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true' && env.SQL_EXIST == 'true'}}
        name: Lint SQL Files
        run: dotnet tsqllint "${{github.workspace}}/db"

      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true' && env.SQL_EXIST == 'true'}}
        name: Get SQL Compare
        run: docker pull redgate/sqlcompare:latest

      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true' && env.SQL_EXIST == 'true'}}
        name: Build SQL change
        run: docker run "-v$GITHUB_WORKSPACE:$GITHUB_WORKSPACE" --net=host --rm redgate/sqlcompare:latest /IAgreeToTheEULA /filter:"$DB_FILTER" /options:ConsiderNextFilegroupInPartitionSchemes,DecryptPost2kEncryptedObjects,DoNotOutputCommentHeader,ForceColumnOrder,IgnoreCertificatesAndCryptoKeys,IgnoreDatabaseAndServerName,IgnoreUserProperties,IgnoreUsersPermissionsAndRoleMemberships,IgnoreWhiteSpace,IgnoreWithElementOrder,IncludeDependencies,NoDeploymentLogging,ThrowOnFileParseFailed,UseCompatibilityLevel /transactionIsolationLevel:SERIALIZABLE /include:staticData /scriptFile:"$DB_OUTPUT" /scripts1:"$DB_SOURCE" /showWarnings /include:Identical /report:"$DB_REPORT" /reportType:Xml /force /OutputWidth:1024 /out:"$DB_LOG" /empty2
        env:
          DB_SOURCE: ${{github.workspace}}/db
          DB_OUTPUT: ${{github.workspace}}/update.sql
          DB_LOG: ${{github.workspace}}/update.log
          DB_REPORT: ${{github.workspace}}/update.xml
          DB_FILTER: ${{github.workspace}}/db/Filter.scpf

      ## NUGET PACKAGES
      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true' && env.NUGET_API_KEY != '' && env.NUGET_PACK == 'true'}}
        name: Pack tool
        working-directory: ./src
        run: dotnet pack --configuration Release "/p:Version=${{env.BUILD_VERSION}}" --no-restore
        env:
          ReleaseNotes: ${{steps.release-notes.outputs.content}}
      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true' && env.NUGET_API_KEY != '' && env.NUGET_PACK == 'true'}}
        name: Copy packed to dist
        run:  |
          shopt -s globstar
          [ ! -d ../dist ] && mkdir ../dist
          cp **/*.nupkg ../dist
        working-directory: ./src
        shell: bash
      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true' && env.NUGET_API_KEY != '' && env.NUGET_PACK == 'true'}}
        name: Publish Packages to Nuget
        run: dotnet pushpackages -folder dist --api-key "${{env.NUGET_API_KEY}}" --source "${{env.NUGET_FEED}}"

      ## OCTOPUS PACKAGES
      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true' && env.OCTOPUS_DEPLOY_PACKAGE != ''}}
        name: Pack Packages for Octopus (win-x64)
        working-directory: ${{github.workspace}}/src/${{env.OCTOPUS_DEPLOY_PACKAGE}}
        run: dotnet publish -warnaserror -p:PublishSingleFile=true --configuration:Release -r:win-x64 --self-contained -p:NoWarn=NETSDK1179 -p:PublishAot=false -p:PublishReadyToRun=False -p:PublishReadyToRunShowWarnings=True -p:PublishTrimmed=False -p:DisableSwagger=False -p:TreatWarningsAsErrors=True "-p:Version=${{env.BUILD_VERSION}}" -p:IncludeNativeLibrariesForSelfExtract=false -p:SolutionDir=..\\ --output ../server-dist/win-x64
      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true' && env.OCTOPUS_DEPLOY_PACKAGE != ''}}
        name: Pack Packages for Octopus (linux-x64)
        working-directory: ${{github.workspace}}/src/${{env.OCTOPUS_DEPLOY_PACKAGE}}
        run: dotnet publish -warnaserror -p:PublishSingleFile=true --configuration:Release -r:linux-x64 --self-contained -p:NoWarn=NETSDK1179 -p:PublishAot=false -p:PublishReadyToRun=False -p:PublishReadyToRunShowWarnings=True -p:PublishTrimmed=False -p:DisableSwagger=False -p:TreatWarningsAsErrors=True "-p:Version=${{env.BUILD_VERSION}}" -p:IncludeNativeLibrariesForSelfExtract=false -p:SolutionDir=..\\ --output ../server-dist/linux-x64
      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true' && env.OCTOPUS_DEPLOY_PACKAGE != ''}}
        name: Pack Packages for Octopus (linux-arm64)
        working-directory: ${{github.workspace}}/src/${{env.OCTOPUS_DEPLOY_PACKAGE}}
        run: dotnet publish -warnaserror -p:PublishSingleFile=true --configuration:Release -r:linux-arm64 --self-contained -p:NoWarn=NETSDK1179 -p:PublishAot=false -p:PublishReadyToRun=False -p:PublishReadyToRunShowWarnings=True -p:PublishTrimmed=False -p:DisableSwagger=False -p:TreatWarningsAsErrors=True "-p:Version=${{env.BUILD_VERSION}}" -p:IncludeNativeLibrariesForSelfExtract=false -p:SolutionDir=..\\ --output ../server-dist/linux-arm64

      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true' && env.OCTOPUS_DEPLOY_PACKAGE != ''}}
        name: Zip Packages for Octopus (win-x64)
        working-directory: ${{github.workspace}}/src/server-dist/win-x64
        run: zip -9r "${{github.workspace}}/${{env.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-win-x64.${{env.BUILD_VERSION}}.zip" . -x -- *.pdb
      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true' && env.OCTOPUS_DEPLOY_PACKAGE != ''}}
        name: Zip Packages for Octopus (linux-x64)
        working-directory: ${{github.workspace}}/src/server-dist/linux-x64
        run: zip -9r "${{github.workspace}}/${{env.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-linux-x64.${{env.BUILD_VERSION}}.zip" . -x -- *.pdb
      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true' && env.OCTOPUS_DEPLOY_PACKAGE != ''}}
        name: Zip Packages for Octopus (linux-arm64)
        working-directory: ${{github.workspace}}/src/server-dist/linux-arm64
        run: zip -9r "${{github.workspace}}/${{env.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-linux-arm64.${{env.BUILD_VERSION}}.zip" . -x -- *.pdb

      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true' && env.SQL_EXIST == 'true' && env.OCTOPUS_DEPLOY_PACKAGE != ''}}
        name: Zip DB for Octopus
        working-directory: ./db
        run: |
          mkdir -p ../package/db/state
          cp -R -- * ../package/db/state
          cd ../package
          zip -9r "${{github.workspace}}/${{env.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-database.${{env.BUILD_VERSION}}.zip" .

      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true' && env.SQL_EXIST == 'true' && env.OCTOPUS_DEPLOY_PACKAGE != ''}}
        name: Push package to Octopus (EXE and DB)
        run: octopus package upload --no-prompt --overwrite-mode=ignore --package="${{env.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-win-x64.${{env.BUILD_VERSION}}.zip" --package="${{env.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-linux-x64.${{env.BUILD_VERSION}}.zip" --package="${{env.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-linux-arm64.${{env.BUILD_VERSION}}.zip" --package="${{env.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-database.${{env.BUILD_VERSION}}.zip"
        env:
          OCTOPUS_URL: "${{env.OCTOPUS_SERVER}}"
          OCTOPUS_API_KEY: "${{env.OCTOPUS_API_KEY}}"
          OCTOPUS_SPACE: "${{env.OCTOPUS_SPACE_NAME}}"

      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true' && env.SQL_EXIST != 'true' && env.OCTOPUS_DEPLOY_PACKAGE != ''}}
        name: Push package to Octopus (EXE ONLY)
        run: octopus package upload --no-prompt --overwrite-mode=ignore --package="${{env.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-win-x64.${{env.BUILD_VERSION}}.zip" --package="${{env.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-linux-x64.${{env.BUILD_VERSION}}.zip" --package="${{env.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-linux-arm64.${{env.BUILD_VERSION}}.zip"
        env:
          OCTOPUS_URL: "${{env.OCTOPUS_SERVER}}"
          OCTOPUS_API_KEY: "${{env.OCTOPUS_API_KEY}}"
          OCTOPUS_SPACE: "${{env.OCTOPUS_SPACE_NAME}}"

      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true' && env.SQL_EXIST != 'true' && env.OCTOPUS_DEPLOY_PACKAGE != '' && env.OCTOPUS_CHANNEL != '' && env.GIT_BRANCH == 'refs/heads/main'}}
        name: Create Octopus Release (EXE and DB)
        run: octopus release create --no-prompt --project="${{env.OCTOPUS_PROJECT}}" --version="${{env.BUILD_VERSION}}" --channel="${{env.OCTOPUS_CHANNEL}}" --package="${{env.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-win-x64:${{env.BUILD_VERSION}}" --package="${{env.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-linux-x64:${{env.BUILD_VERSION}}" --package="${{env.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-linux-arm64:${{env.BUILD_VERSION}}" --package="${{env.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-database:${{env.BUILD_VERSION}}" --release-notes-file="RELEASE_NOTES.md"
        env:
          OCTOPUS_URL: "${{env.OCTOPUS_SERVER}}"
          OCTOPUS_API_KEY: "${{env.OCTOPUS_API_KEY}}"
          OCTOPUS_SPACE: "${{env.OCTOPUS_SPACE_NAME}}"

      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true' && env.SQL_EXIST != 'true' && env.OCTOPUS_DEPLOY_PACKAGE != '' && env.OCTOPUS_CHANNEL != '' && env.GIT_BRANCH == 'refs/heads/main'}}
        name: Create Octopus Release (EXE ONLY)
        run: octopus release create --no-prompt --project="${{env.OCTOPUS_PROJECT}}" --version="${{env.BUILD_VERSION}}" --channel="${{env.OCTOPUS_CHANNEL}}" --package="${{env.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-win-x64:${{env.BUILD_VERSION}}" --package="${{env.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-linux-x64:${{env.BUILD_VERSION}}" --package="${{env.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-linux-arm64:${{env.BUILD_VERSION}}" --release-notes-file="RELEASE_NOTES.md"
        env:
          OCTOPUS_URL: "${{env.OCTOPUS_SERVER}}"
          OCTOPUS_API_KEY: "${{env.OCTOPUS_API_KEY}}"
          OCTOPUS_SPACE: "${{env.OCTOPUS_SPACE_NAME}}"

      - if: ${{steps.check_files.outputs.CSPROJ_EXIST == 'true' && steps.check_files.outputs.SLN_EXIST == 'true' && env.OCTOPUS_DEPLOY_PACKAGE != '' && env.OCTOPUS_CHANNEL != '' && env.GIT_BRANCH == 'refs/heads/main'}}
        name: Deploy Octopus Release
        run: octopus release deploy --no-prompt --project="${{env.OCTOPUS_PROJECT}}" --version="${{env.BUILD_VERSION}}" --environment="${{env.OCTOPUS_DEPLOY_TO}}"
        env:
          OCTOPUS_URL: "${{env.OCTOPUS_SERVER}}"
          OCTOPUS_API_KEY: "${{env.OCTOPUS_API_KEY}}"
          OCTOPUS_SPACE: "${{env.OCTOPUS_SPACE_NAME}}"

