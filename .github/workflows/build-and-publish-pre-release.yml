name: .NET [Pre-Release]

on:
  push:
    paths:
      - 'src/**/*'
      - '.github/workflows/build*.yml'
    branches-ignore:
      - 'release/*'
      - 'hotfix/*'

concurrency:
  group: ${{github.workflow}}-${{github.ref}}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build-pre-release:

    runs-on: ubuntu-latest
    env:
      OCTOPUS_DEPLOY_PACKAGE: ${{secrets.OCTOPUS_DEPLOY_PACKAGE}}
      OCTOPUS_DEPLOY_PACKAGE_ZIP: ${{secrets.OCTOPUS_DEPLOY_PACKAGE_ZIP}}
      OCTOPUS_PROJECT: ${{secrets.OCTOPUS_PROJECT}}
      OCTOPUS_CHANNEL: ${{secrets.OCTOPUS_PRERELEASE_CHANNEL}}
      OCTOPUS_DEPLOY_TO: ${{secrets.OCTOPUS_DEPLOYTO_PRERELEASE}}
      OCTOPUS_SERVER: ${{secrets.OCTOPUS_SERVER}}
      OCTOPUS_API_KEY: ${{secrets.OCTOPUS_API_KEY}}
      NUGET_API_KEY: ${{secrets.NUGET_API_KEY}}
      NUGET_FEED: ${{secrets.NUGET_FEED}}
      DOTNET_NOLOGO: true
      DOTNET_PRINT_TELEMETRY_MESSAGE: false
      DOTNET_MULTILEVEL_LOOKUP: false
      DOTNET_INSTALL_DIR: ${{github.workspace}}/.dotnet
      DOTNET_ReadyToRun: 0
      DOTNET_TC_QuickJitForLoops: 1
      DOTNET_TieredPGO: 1

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Fetch tags and master
        run: |
          git fetch --tags
          echo "REF: $GITHUB_REF"
          echo "SHA: $GITHUB_SHA"
          echo "GIT_BRANCH=$GITHUB_REF" >> "$GITHUB_ENV"
          git branch --remote
      - name: Check file existence
        id: check_files
        run: |
          echo "Hash: ${{hashfiles('**/*.sln', '**/*.csproj', '**/*.cs')}}"
          [[ -d src && -f src/global.json && '${{hashfiles('**/*.sln', '**/*.csproj', '**/*.cs')}}' != '' ]] && echo 'FILES_EXIST=true' >> "$GITHUB_OUTPUT" || echo 'FILES_EXIST=false' >> "$GITHUB_OUTPUT"
          [[ -d src && -f src/global.json && '${{hashfiles('**/*.sln', '**/*.csproj', '**/*.cs')}}' != '' ]] && echo 'Exists: true' || echo 'Exists: false'
      - if: ${{steps.check_files.outputs.FILES_EXIST == 'true'}}
        name: Determine .net core version
        uses: credfeto/action-dotnet-version-detect@v1.3.0
        with:
          file: src/global.json
          fallback: 6.0.*

      - if: ${{steps.check_files.outputs.FILES_EXIST == 'true'}}
        name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          dotnet-version: |
              6.0.*
              ${{env.DOTNET_VERSION}}
      - if: ${{steps.check_files.outputs.FILES_EXIST == 'true'}}
        name: Enable dotnet tools
        run: dotnet new tool-manifest
      - if: ${{steps.check_files.outputs.FILES_EXIST == 'true'}}
        name: Install Build Version Tool
        run: dotnet tool install --local FunFair.BuildVersion
      - if: ${{steps.check_files.outputs.FILES_EXIST == 'true'}}
        name: Install Multi-Push Tool
        run: dotnet tool install --local Credfeto.Package.Push
      - if: ${{steps.check_files.outputs.FILES_EXIST == 'true'}}
        name: Set Define Build Version
        run: dotnet buildversion --BuildNumber "$GITHUB_RUN_NUMBER"
      - if: ${{steps.check_files.outputs.FILES_EXIST == 'true'}}
        name: Install Changelog Tool
        run: dotnet tool install --local Credfeto.Changelog.Cmd
      - if: ${{steps.check_files.outputs.FILES_EXIST == 'true' && env.OCTOPUS_DEPLOY_PACKAGE != ''}}
        name: install Octopus Deploy CLI
        uses: OctopusDeploy/install-octocli@v1.2.1
        with:
          version: latest
      - if: ${{steps.check_files.outputs.FILES_EXIST == 'true'}}
        name: Create Release Notes
        run: dotnet changelog --changelog CHANGELOG.md --extract RELEASE_NOTES.md --version "${{env.BUILD_VERSION}}"
      - if: ${{steps.check_files.outputs.FILES_EXIST == 'true'}}
        id: release-notes
        uses: juliangruber/read-file-action@v1
        with:
          path: RELEASE_NOTES.md

      # BUILD DOTNET
      - if: ${{steps.check_files.outputs.FILES_EXIST == 'true'}}
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{runner.os}}-nuget-${{hashFiles('**/*.sln', '**/*.csproj', '**/*.props')}}
          restore-keys: |
            ${{runner.os}}-nuget-
      - if: ${{steps.check_files.outputs.FILES_EXIST == 'true'}}
        name: Restore dotnet packages
        working-directory: ./src
        run: dotnet restore
      - if: ${{steps.check_files.outputs.FILES_EXIST == 'true'}}
        name: Build with dotnet
        working-directory: ./src
        run: dotnet build --no-restore --configuration Release "/p:Version=${{env.BUILD_VERSION}}"
        env:
          ReleaseNotes: ${{steps.release-notes.outputs.content}}

      ## RUN TESTS
      - if: ${{steps.check_files.outputs.FILES_EXIST == 'true'}}
        name: Test with dotnet
        working-directory: ./src
        run: dotnet test --no-build --no-restore -noConsoleLogger --configuration Release "/p:Version=${{env.BUILD_VERSION}}" --filter FullyQualifiedName\!~Integration --logger:"trx;LogFilePrefix=testResults" --results-directory ../test-results
        env:
          ReleaseNotes: ${{steps.release-notes.outputs.content}}

      ## NUGET PACKAGES
      - if: ${{steps.check_files.outputs.FILES_EXIST == 'true' && env.NUGET_API_KEY != ''}}
        name: Pack tool
        working-directory: ./src
        run: dotnet pack --configuration Release "/p:Version=${{env.BUILD_VERSION}}" --no-restore --output ../dist
        env:
          ReleaseNotes: ${{steps.release-notes.outputs.content}}
      - if: ${{steps.check_files.outputs.FILES_EXIST == 'true' && env.NUGET_API_KEY != ''}}
        name: Publish Packages to Nuget
        run: dotnet pushpackages -folder dist --api-key "${{env.NUGET_API_KEY}}" --source "${{env.NUGET_FEED}}"

      ## OCTOPUS PACKAGES
      - if: ${{steps.check_files.outputs.FILES_EXIST == 'true' && env.OCTOPUS_DEPLOY_PACKAGE != ''}}
        name: Pack Packages for Octopus (x64)
        working-directory: ./src/${{env.OCTOPUS_DEPLOY_PACKAGE}}
        run: dotnet publish -warnaserror -p:PublishSingleFile=true --configuration:Release -r:linux-x64 --self-contained -p:NoWarn=NETSDK1179 -p:PublishAot=false -p:PublishReadyToRun=False -p:PublishReadyToRunShowWarnings=True -p:PublishTrimmed=False -p:DisableSwagger=False -p:TreatWarningsAsErrors=True "-p:Version=${{env.BUILD_VERSION}}" -p:IncludeNativeLibrariesForSelfExtract=false -p:SolutionDir=..\\ --output ../server-dist/x64
      - if: ${{steps.check_files.outputs.FILES_EXIST == 'true' && env.OCTOPUS_DEPLOY_PACKAGE != ''}}
        name: Pack Packages for Octopus (arm64)
        working-directory: ./src/${{env.OCTOPUS_DEPLOY_PACKAGE}}
        run: dotnet publish -warnaserror -p:PublishSingleFile=true --configuration:Release -r:linux-arm64 --self-contained -p:NoWarn=NETSDK1179 -p:PublishAot=false -p:PublishReadyToRun=False -p:PublishReadyToRunShowWarnings=True -p:PublishTrimmed=False -p:DisableSwagger=False -p:TreatWarningsAsErrors=True "-p:Version=${{env.BUILD_VERSION}}" -p:IncludeNativeLibrariesForSelfExtract=false -p:SolutionDir=..\\ --output ../server-dist/arm64
      - if: ${{steps.check_files.outputs.FILES_EXIST == 'true' && env.OCTOPUS_DEPLOY_PACKAGE != ''}}
        name: Zip Packages for Octopus (x64)
        working-directory: ./src/server-dist/x64
        run: zip -9r "../../../${{env.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-x64.${{env.BUILD_VERSION}}.zip" .
      - if: ${{steps.check_files.outputs.FILES_EXIST == 'true' && env.OCTOPUS_DEPLOY_PACKAGE != ''}}
        name: Zip Packages for Octopus (arm64)
        working-directory: ./src/server-dist/arm64
        run: zip -9r "../../../${{env.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-arm64.${{env.BUILD_VERSION}}.zip" .
      - if: ${{steps.check_files.outputs.FILES_EXIST == 'true' && env.OCTOPUS_DEPLOY_PACKAGE != ''}}
        name: Push package to Octopus
        run: octo push --package "${{env.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-x64.${{env.BUILD_VERSION}}.zip" --package "${{env.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-arm64.${{env.BUILD_VERSION}}.zip" --server="${{env.OCTOPUS_SERVER}}" --apiKey="${{env.OCTOPUS_API_KEY}}" --enableServiceMessages --debug --overwrite-mode=IgnoreIfExists
      - if: ${{steps.check_files.outputs.FILES_EXIST == 'true' && env.OCTOPUS_DEPLOY_PACKAGE != '' && env.OCTOPUS_CHANNEL != '' && env.GIT_BRANCH == 'refs/heads/main'}}
        name: Deploy
        run: octo create-release --project="${{env.OCTOPUS_PROJECT}}" --version="${{env.BUILD_VERSION}}" --channel="${{env.OCTOPUS_CHANNEL}}" --package="${{env.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-x64:${{env.BUILD_VERSION}}" --package="${{env.OCTOPUS_DEPLOY_PACKAGE_ZIP}}-arm64:${{env.BUILD_VERSION}}" --deployTo="${{env.OCTOPUS_DEPLOY_TO}}" --server="${{secrets.OCTOPUS_SERVER}}" --apiKey="${{secrets.OCTOPUS_API_KEY}}" --enableServiceMessages --debug --releaseNotesFile="RELEASE_NOTES.md"
